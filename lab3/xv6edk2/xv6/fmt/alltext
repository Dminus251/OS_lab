0100 typedef unsigned int   uint;
0101 typedef unsigned short ushort;
0102 typedef unsigned char  uchar;
0103 typedef uint pde_t;
0104 
0105 
0106 
0107 
0108 
0109 
0110 
0111 
0112 
0113 
0114 
0115 
0116 
0117 
0118 
0119 
0120 
0121 
0122 
0123 
0124 
0125 
0126 
0127 
0128 
0129 
0130 
0131 
0132 
0133 
0134 
0135 
0136 
0137 
0138 
0139 
0140 
0141 
0142 
0143 
0144 
0145 
0146 
0147 
0148 
0149 
0150 #define NPROC        64  
0151 #define KSTACKSIZE 4096  
0152 #define NCPU          4  
0153 #define NOFILE       16  
0154 #define NFILE       100  
0155 #define NINODE       50  
0156 #define NDEV         10  
0157 #define ROOTDEV       1  
0158 #define MAXARG       32  
0159 #define MAXOPBLOCKS  10  
0160 #define LOGSIZE      (MAXOPBLOCKS*3)  
0161 #define NBUF         (MAXOPBLOCKS*3)  
0162 #define FSSIZE       1000  
0163 
0164 
0165 
0166 
0167 
0168 
0169 
0170 
0171 
0172 
0173 
0174 
0175 
0176 
0177 
0178 
0179 
0180 
0181 
0182 
0183 
0184 
0185 
0186 
0187 
0188 
0189 
0190 
0191 
0192 
0193 
0194 
0195 
0196 
0197 
0198 
0199 
0200 
0201 
0202 #define EXTMEM  0x100000            
0203 #define PHYSTOP 0x20000000         
0204 #define DEVSPACE 0xFE000000         
0205 #define BOOTPARAM 0x50000
0206 
0207 
0208 #define KERNBASE 0x80000000         
0209 
0210 #define KERNLINK (KERNBASE+EXTMEM)  
0211 
0212 #define PCI_BAR_BASE 0x80000000
0213 #define PCI_VP_OFFSET 0x40000000
0214 #define PCI_P2V(a) (((uint)(a)) + PCI_VP_OFFSET)
0215 #define V2P(a) (((uint) (a)) - KERNBASE)
0216 #define P2V(a) (((void *) (a)) + KERNBASE)
0217 
0218 #define V2P_WO(x) ((x) - KERNBASE)    
0219 #define P2V_WO(x) ((x) + KERNBASE)    
0220 
0221 
0222 
0223 
0224 
0225 
0226 
0227 
0228 
0229 
0230 
0231 
0232 
0233 
0234 
0235 
0236 
0237 
0238 
0239 
0240 
0241 
0242 
0243 
0244 
0245 
0246 
0247 
0248 
0249 
0250 struct buf;
0251 struct context;
0252 struct file;
0253 struct inode;
0254 struct pipe;
0255 struct proc;
0256 struct rtcdate;
0257 struct spinlock;
0258 struct sleeplock;
0259 struct stat;
0260 struct superblock;
0261 
0262 
0263 void            binit(void);
0264 struct buf*     bread(uint, uint);
0265 void            brelse(struct buf*);
0266 void            bwrite(struct buf*);
0267 
0268 
0269 void            consoleinit(void);
0270 void            cprintf(char*, ...);
0271 void            consoleintr(int(*)(void));
0272 void            panic(char*) __attribute__((noreturn));
0273 
0274 
0275 int             exec(char*, char**);
0276 
0277 
0278 struct file*    filealloc(void);
0279 void            fileclose(struct file*);
0280 struct file*    filedup(struct file*);
0281 void            fileinit(void);
0282 int             fileread(struct file*, char*, int n);
0283 int             filestat(struct file*, struct stat*);
0284 int             filewrite(struct file*, char*, int n);
0285 
0286 
0287 void            readsb(int dev, struct superblock *sb);
0288 int             dirlink(struct inode*, char*, uint);
0289 struct inode*   dirlookup(struct inode*, char*, uint*);
0290 struct inode*   ialloc(uint, short);
0291 struct inode*   idup(struct inode*);
0292 void            iinit(int dev);
0293 void            ilock(struct inode*);
0294 void            iput(struct inode*);
0295 void            iunlock(struct inode*);
0296 void            iunlockput(struct inode*);
0297 void            iupdate(struct inode*);
0298 int             namecmp(const char*, const char*);
0299 struct inode*   namei(char*);
0300 struct inode*   nameiparent(char*, char*);
0301 int             readi(struct inode*, char*, uint, uint);
0302 void            stati(struct inode*, struct stat*);
0303 int             writei(struct inode*, char*, uint, uint);
0304 
0305 
0306 void            ideinit(void);
0307 void            ideintr(void);
0308 void            iderw(struct buf*);
0309 
0310 
0311 void            ioapicenable(int irq, int cpu);
0312 extern uchar    ioapicid;
0313 void            ioapicinit(void);
0314 
0315 
0316 char*           kalloc(void);
0317 void            kfree(char*);
0318 void            kinit1(void*, void*);
0319 void            kinit2(void*, void*);
0320 
0321 
0322 void            kbdintr(void);
0323 
0324 
0325 void            cmostime(struct rtcdate *r);
0326 int             lapicid(void);
0327 extern volatile uint*    lapic;
0328 void            lapiceoi(void);
0329 void            lapicinit(void);
0330 void            lapicstartap(uchar, uint);
0331 void            microdelay(int);
0332 
0333 
0334 void            initlog(int dev);
0335 void            log_write(struct buf*);
0336 void            begin_op();
0337 void            end_op();
0338 
0339 
0340 extern int      ismp;
0341 void            mpinit(void);
0342 
0343 
0344 void            picenable(int);
0345 void            picinit(void);
0346 
0347 
0348 
0349 
0350 
0351 int             pipealloc(struct file**, struct file**);
0352 void            pipeclose(struct pipe*, int);
0353 int             piperead(struct pipe*, char*, int);
0354 int             pipewrite(struct pipe*, char*, int);
0355 
0356 
0357 
0358 int             cpuid(void);
0359 void            exit(void);
0360 int             fork(void);
0361 int             growproc(int);
0362 int             kill(int);
0363 struct cpu*     mycpu(void);
0364 struct proc*    myproc();
0365 void            pinit(void);
0366 void            procdump(void);
0367 void            scheduler(void) __attribute__((noreturn));
0368 void            sched(void);
0369 void            setproc(struct proc*);
0370 void            sleep(void*, struct spinlock*);
0371 void            userinit(void);
0372 int             wait(void);
0373 void            wakeup(void*);
0374 void            yield(void);
0375 void		exit2(int status);
0376 int		wait2(int *satus);
0377 
0378 
0379 void            swtch(struct context**, struct context*);
0380 
0381 
0382 void            acquire(struct spinlock*);
0383 void            getcallerpcs(void*, uint*);
0384 int             holding(struct spinlock*);
0385 void            initlock(struct spinlock*, char*);
0386 void            release(struct spinlock*);
0387 void            pushcli(void);
0388 void            popcli(void);
0389 
0390 
0391 void            acquiresleep(struct sleeplock*);
0392 void            releasesleep(struct sleeplock*);
0393 int             holdingsleep(struct sleeplock*);
0394 void            initsleeplock(struct sleeplock*, char*);
0395 
0396 
0397 
0398 
0399 
0400 
0401 int             memcmp(const void*, const void*, uint);
0402 void*           memmove(void*, const void*, uint);
0403 void*           memset(void*, int, uint);
0404 char*           safestrcpy(char*, const char*, int);
0405 int             strlen(const char*);
0406 int             strncmp(const char*, const char*, uint);
0407 char*           strncpy(char*, const char*, int);
0408 
0409 
0410 int             argint(int, int*);
0411 int             argptr(int, char**, int);
0412 int             argstr(int, char**);
0413 int             fetchint(uint, int*);
0414 int             fetchstr(uint, char**);
0415 void            syscall(void);
0416 
0417 
0418 void            timerinit(void);
0419 
0420 
0421 void            idtinit(void);
0422 extern uint     ticks;
0423 void            tvinit(void);
0424 extern struct spinlock tickslock;
0425 
0426 
0427 void            uartinit(void);
0428 void            uartintr(void);
0429 void            uartputc(int);
0430 
0431 
0432 void            seginit(void);
0433 void            kvmalloc(void);
0434 pde_t*          setupkvm(void);
0435 char*           uva2ka(pde_t*, char*);
0436 int             allocuvm(pde_t*, uint, uint);
0437 int             deallocuvm(pde_t*, uint, uint);
0438 void            freevm(pde_t*);
0439 void            inituvm(pde_t*, char*, uint);
0440 int             loaduvm(pde_t*, char*, struct inode*, uint, uint);
0441 pde_t*          copyuvm(pde_t*, uint);
0442 void            switchuvm(struct proc*);
0443 void            switchkvm(void);
0444 int             copyout(pde_t*, uint, void*, uint);
0445 void            clearpteu(pde_t *pgdir, char *uva);
0446 
0447 
0448 #define NELEM(x) (sizeof(x)/sizeof((x)[0]))
0449 
0450 
0451 
0452 static inline uchar
0453 inb(ushort port)
0454 {
0455   uchar data;
0456 
0457   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
0458   return data;
0459 }
0460 
0461 static inline void
0462 insl(int port, void *addr, int cnt)
0463 {
0464   asm volatile("cld; rep insl" :
0465                "=D" (addr), "=c" (cnt) :
0466                "d" (port), "0" (addr), "1" (cnt) :
0467                "memory", "cc");
0468 }
0469 
0470 static inline void
0471 outb(ushort port, uchar data)
0472 {
0473   asm volatile("out %0,%1" : : "a" (data), "d" (port));
0474 }
0475 
0476 static inline void
0477 outw(ushort port, ushort data)
0478 {
0479   asm volatile("out %0,%1" : : "a" (data), "d" (port));
0480 }
0481 
0482 static inline void
0483 outsl(int port, const void *addr, int cnt)
0484 {
0485   asm volatile("cld; rep outsl" :
0486                "=S" (addr), "=c" (cnt) :
0487                "d" (port), "0" (addr), "1" (cnt) :
0488                "cc");
0489 }
0490 
0491 static inline void
0492 stosb(void *addr, int data, int cnt)
0493 {
0494   asm volatile("cld; rep stosb" :
0495                "=D" (addr), "=c" (cnt) :
0496                "0" (addr), "1" (cnt), "a" (data) :
0497                "memory", "cc");
0498 }
0499 
0500 static inline void
0501 stosl(void *addr, int data, int cnt)
0502 {
0503   asm volatile("cld; rep stosl" :
0504                "=D" (addr), "=c" (cnt) :
0505                "0" (addr), "1" (cnt), "a" (data) :
0506                "memory", "cc");
0507 }
0508 
0509 struct segdesc;
0510 
0511 static inline void
0512 lgdt(struct segdesc *p, int size)
0513 {
0514   volatile ushort pd[3];
0515 
0516   pd[0] = size-1;
0517   pd[1] = (uint)p;
0518   pd[2] = (uint)p >> 16;
0519 
0520   asm volatile("lgdt (%0)" : : "r" (pd));
0521 }
0522 
0523 struct gatedesc;
0524 
0525 static inline void
0526 lidt(struct gatedesc *p, int size)
0527 {
0528   volatile ushort pd[3];
0529 
0530   pd[0] = size-1;
0531   pd[1] = (uint)p;
0532   pd[2] = (uint)p >> 16;
0533 
0534   asm volatile("lidt (%0)" : : "r" (pd));
0535 }
0536 
0537 static inline void
0538 ltr(ushort sel)
0539 {
0540   asm volatile("ltr %0" : : "r" (sel));
0541 }
0542 
0543 static inline uint
0544 readeflags(void)
0545 {
0546   uint eflags;
0547   asm volatile("pushfl; popl %0" : "=r" (eflags));
0548   return eflags;
0549 }
0550 static inline void
0551 loadgs(ushort v)
0552 {
0553   asm volatile("movw %0, %%gs" : : "r" (v));
0554 }
0555 
0556 static inline void
0557 cli(void)
0558 {
0559   asm volatile("cli");
0560 }
0561 
0562 static inline void
0563 sti(void)
0564 {
0565   asm volatile("sti");
0566 }
0567 
0568 static inline uint
0569 xchg(volatile uint *addr, uint newval)
0570 {
0571   uint result;
0572 
0573   
0574   asm volatile("lock; xchgl %0, %1" :
0575                "+m" (*addr), "=a" (result) :
0576                "1" (newval) :
0577                "cc");
0578   return result;
0579 }
0580 
0581 static inline uint
0582 rcr2(void)
0583 {
0584   uint val;
0585   asm volatile("movl %%cr2,%0" : "=r" (val));
0586   return val;
0587 }
0588 
0589 static inline void
0590 lcr3(uint val)
0591 {
0592   asm volatile("movl %0,%%cr3" : : "r" (val));
0593 }
0594 
0595 
0596 
0597 
0598 
0599 
0600 
0601 
0602 struct trapframe {
0603   
0604   uint edi;
0605   uint esi;
0606   uint ebp;
0607   uint oesp;      
0608   uint ebx;
0609   uint edx;
0610   uint ecx;
0611   uint eax;
0612 
0613   
0614   ushort gs;
0615   ushort padding1;
0616   ushort fs;
0617   ushort padding2;
0618   ushort es;
0619   ushort padding3;
0620   ushort ds;
0621   ushort padding4;
0622   uint trapno;
0623 
0624   
0625   uint err;
0626   uint eip;
0627   ushort cs;
0628   ushort padding5;
0629   uint eflags;
0630 
0631   
0632   uint esp;
0633   ushort ss;
0634   ushort padding6;
0635 };
0636 
0637 
0638 
0639 
0640 
0641 
0642 
0643 
0644 
0645 
0646 
0647 
0648 
0649 
0650 
0651 
0652 
0653 
0654 #define SEG_NULLASM                                             \
0655         .word 0, 0;                                             \
0656         .byte 0, 0, 0, 0
0657 
0658 
0659 
0660 #define SEG_ASM(type,base,lim)                                  \
0661         .word (((lim) >> 12) & 0xffff), ((base) & 0xffff);      \
0662         .byte (((base) >> 16) & 0xff), (0x90 | (type)),         \
0663                 (0xC0 | (((lim) >> 28) & 0xf)), (((base) >> 24) & 0xff)
0664 
0665 #define STA_X     0x8       
0666 #define STA_E     0x4       
0667 #define STA_C     0x4       
0668 #define STA_W     0x2       
0669 #define STA_R     0x2       
0670 #define STA_A     0x1       
0671 
0672 
0673 
0674 
0675 
0676 
0677 
0678 
0679 
0680 
0681 
0682 
0683 
0684 
0685 
0686 
0687 
0688 
0689 
0690 
0691 
0692 
0693 
0694 
0695 
0696 
0697 
0698 
0699 
0700 
0701 
0702 
0703 
0704 #define FL_CF           0x00000001      
0705 #define FL_PF           0x00000004      
0706 #define FL_AF           0x00000010      
0707 #define FL_ZF           0x00000040      
0708 #define FL_SF           0x00000080      
0709 #define FL_TF           0x00000100      
0710 #define FL_IF           0x00000200      
0711 #define FL_DF           0x00000400      
0712 #define FL_OF           0x00000800      
0713 #define FL_IOPL_MASK    0x00003000      
0714 #define FL_IOPL_0       0x00000000      
0715 #define FL_IOPL_1       0x00001000      
0716 #define FL_IOPL_2       0x00002000      
0717 #define FL_IOPL_3       0x00003000      
0718 #define FL_NT           0x00004000      
0719 #define FL_RF           0x00010000      
0720 #define FL_VM           0x00020000      
0721 #define FL_AC           0x00040000      
0722 #define FL_VIF          0x00080000      
0723 #define FL_VIP          0x00100000      
0724 #define FL_ID           0x00200000      
0725 
0726 
0727 #define CR0_PE          0x00000001      
0728 #define CR0_MP          0x00000002      
0729 #define CR0_EM          0x00000004      
0730 #define CR0_TS          0x00000008      
0731 #define CR0_ET          0x00000010      
0732 #define CR0_NE          0x00000020      
0733 #define CR0_WP          0x00010000      
0734 #define CR0_AM          0x00040000      
0735 #define CR0_NW          0x20000000      
0736 #define CR0_CD          0x40000000      
0737 #define CR0_PG          0x80000000      
0738 
0739 #define CR4_PSE         0x00000010      
0740 
0741 
0742 #define SEG_KCODE 1  
0743 #define SEG_KDATA 2  
0744 #define SEG_UCODE 3  
0745 #define SEG_UDATA 4  
0746 #define SEG_TSS   5  
0747 
0748 
0749 #define NSEGS     6
0750 #ifndef __ASSEMBLER__
0751 
0752 struct segdesc {
0753   uint lim_15_0 : 16;  
0754   uint base_15_0 : 16; 
0755   uint base_23_16 : 8; 
0756   uint type : 4;       
0757   uint s : 1;          
0758   uint dpl : 2;        
0759   uint p : 1;          
0760   uint lim_19_16 : 4;  
0761   uint avl : 1;        
0762   uint rsv1 : 1;       
0763   uint db : 1;         
0764   uint g : 1;          
0765   uint base_31_24 : 8; 
0766 };
0767 
0768 
0769 #define SEG(type, base, lim, dpl) (struct segdesc)    \
0770 { ((lim) >> 12) & 0xffff, (uint)(base) & 0xffff,      \
0771   ((uint)(base) >> 16) & 0xff, type, 1, dpl, 1,       \
0772   (uint)(lim) >> 28, 0, 0, 1, 1, (uint)(base) >> 24 }
0773 #define SEG16(type, base, lim, dpl) (struct segdesc)  \
0774 { (lim) & 0xffff, (uint)(base) & 0xffff,              \
0775   ((uint)(base) >> 16) & 0xff, type, 1, dpl, 1,       \
0776   (uint)(lim) >> 16, 0, 0, 1, 0, (uint)(base) >> 24 }
0777 #endif
0778 
0779 #define DPL_USER    0x3     
0780 
0781 
0782 #define STA_X       0x8     
0783 #define STA_E       0x4     
0784 #define STA_C       0x4     
0785 #define STA_W       0x2     
0786 #define STA_R       0x2     
0787 #define STA_A       0x1     
0788 
0789 
0790 #define STS_T16A    0x1     
0791 #define STS_LDT     0x2     
0792 #define STS_T16B    0x3     
0793 #define STS_CG16    0x4     
0794 #define STS_TG      0x5     
0795 #define STS_IG16    0x6     
0796 #define STS_TG16    0x7     
0797 #define STS_T32A    0x9     
0798 #define STS_T32B    0xB     
0799 #define STS_CG32    0xC     
0800 #define STS_IG32    0xE     
0801 #define STS_TG32    0xF     
0802 
0803 
0804 
0805 
0806 
0807 
0808 
0809 
0810 
0811 
0812 #define PDX(va)         (((uint)(va) >> PDXSHIFT) & 0x3FF)
0813 
0814 
0815 #define PTX(va)         (((uint)(va) >> PTXSHIFT) & 0x3FF)
0816 
0817 
0818 #define PGADDR(d, t, o) ((uint)((d) << PDXSHIFT | (t) << PTXSHIFT | (o)))
0819 
0820 
0821 #define NPDENTRIES      1024    
0822 #define NPTENTRIES      1024    
0823 #define PGSIZE          4096    
0824 
0825 #define PGSHIFT         12      
0826 #define PTXSHIFT        12      
0827 #define PDXSHIFT        22      
0828 
0829 #define PGROUNDUP(sz)  (((sz)+PGSIZE-1) & ~(PGSIZE-1))
0830 #define PGROUNDDOWN(a) (((a)) & ~(PGSIZE-1))
0831 
0832 
0833 #define PTE_P           0x001   
0834 #define PTE_W           0x002   
0835 #define PTE_U           0x004   
0836 #define PTE_PWT         0x008   
0837 #define PTE_PCD         0x010   
0838 #define PTE_A           0x020   
0839 #define PTE_D           0x040   
0840 #define PTE_PS          0x080   
0841 #define PTE_MBZ         0x180   
0842 
0843 
0844 #define PTE_ADDR(pte)   ((uint)(pte) & ~0xFFF)
0845 #define PTE_FLAGS(pte)  ((uint)(pte) &  0xFFF)
0846 
0847 #ifndef __ASSEMBLER__
0848 typedef uint pte_t;
0849 
0850 
0851 struct taskstate {
0852   uint link;         
0853   uint esp0;         
0854   ushort ss0;        
0855   ushort padding1;
0856   uint *esp1;
0857   ushort ss1;
0858   ushort padding2;
0859   uint *esp2;
0860   ushort ss2;
0861   ushort padding3;
0862   void *cr3;         
0863   uint *eip;         
0864   uint eflags;
0865   uint eax;          
0866   uint ecx;
0867   uint edx;
0868   uint ebx;
0869   uint *esp;
0870   uint *ebp;
0871   uint esi;
0872   uint edi;
0873   ushort es;         
0874   ushort padding4;
0875   ushort cs;
0876   ushort padding5;
0877   ushort ss;
0878   ushort padding6;
0879   ushort ds;
0880   ushort padding7;
0881   ushort fs;
0882   ushort padding8;
0883   ushort gs;
0884   ushort padding9;
0885   ushort ldt;
0886   ushort padding10;
0887   ushort t;          
0888   ushort iomb;       
0889 };
0890 
0891 
0892 
0893 
0894 
0895 
0896 
0897 
0898 
0899 
0900 
0901 struct gatedesc {
0902   uint off_15_0 : 16;   
0903   uint cs : 16;         
0904   uint args : 5;        
0905   uint rsv1 : 3;        
0906   uint type : 4;        
0907   uint s : 1;           
0908   uint dpl : 2;         
0909   uint p : 1;           
0910   uint off_31_16 : 16;  
0911 };
0912 
0913 
0914 
0915 
0916 
0917 
0918 
0919 
0920 
0921 #define SETGATE(gate, istrap, sel, off, d)                \
0922 {                                                         \
0923   (gate).off_15_0 = (uint)(off) & 0xffff;                \
0924   (gate).cs = (sel);                                      \
0925   (gate).args = 0;                                        \
0926   (gate).rsv1 = 0;                                        \
0927   (gate).type = (istrap) ? STS_TG32 : STS_IG32;           \
0928   (gate).s = 0;                                           \
0929   (gate).dpl = (d);                                       \
0930   (gate).p = 1;                                           \
0931   (gate).off_31_16 = (uint)(off) >> 16;                  \
0932 }
0933 
0934 #endif
0935 
0936 
0937 
0938 
0939 
0940 
0941 
0942 
0943 
0944 
0945 
0946 
0947 
0948 
0949 
0950 
0951 
0952 #define ELF_MAGIC 0x464C457FU  
0953 
0954 
0955 struct elfhdr {
0956   uint magic;  
0957   uchar elf[12];
0958   ushort type;
0959   ushort machine;
0960   uint version;
0961   uint entry;
0962   uint phoff;
0963   uint shoff;
0964   uint flags;
0965   ushort ehsize;
0966   ushort phentsize;
0967   ushort phnum;
0968   ushort shentsize;
0969   ushort shnum;
0970   ushort shstrndx;
0971 };
0972 
0973 
0974 struct proghdr {
0975   uint type;
0976   uint off;
0977   uint vaddr;
0978   uint paddr;
0979   uint filesz;
0980   uint memsz;
0981   uint flags;
0982   uint align;
0983 };
0984 
0985 
0986 #define ELF_PROG_LOAD           1
0987 
0988 
0989 #define ELF_PROG_FLAG_EXEC      1
0990 #define ELF_PROG_FLAG_WRITE     2
0991 #define ELF_PROG_FLAG_READ      4
0992 
0993 
0994 
0995 
0996 
0997 
0998 
0999 
1000 
1001 
1002 
1003 
1004 
1005 
1006 
1007 
1008 
1009 
1010 
1011 
1012 
1013 
1014 
1015 
1016 
1017 
1018 
1019 
1020 
1021 
1022 
1023 
1024 
1025 
1026 .p2align 2
1027 .text
1028 .globl multiboot_header
1029 multiboot_header:
1030   
1031   
1032   .long magic
1033   .long flags
1034   .long (-magic-flags)
1035 
1036 
1037 
1038 
1039 .globl _start
1040 _start = V2P_WO(entry)
1041 
1042 .globl wait_main
1043 wait_main:
1044   .long 0
1045 
1046 .globl entry
1047 entry:
1048   
1049   mov $0x10,%ax
1050   mov %ax,%ds
1051   mov %ax,%es
1052   mov %ax,%ss
1053   mov $0,%ax
1054   mov %ax,%fs
1055   mov %ax,%gs
1056 
1057   
1058   movl %cr0,%eax
1059   andl $0x7fffffff,%eax
1060   movl %eax,%cr0
1061 
1062   
1063   movl    $(V2P_WO(entrypgdir)), %eax
1064   movl    %eax, %cr3
1065 
1066   
1067   movl $0x0c0000080,%ecx
1068   rdmsr
1069   andl $0xFFFFFEFF,%eax
1070   wrmsr
1071 
1072   
1073   movl    %cr4, %eax
1074   orl     $(CR4_PSE), %eax
1075   andl    $0xFFFFFFDF, %eax
1076   movl    %eax, %cr4
1077 
1078   
1079   movl    %cr0, %eax
1080   orl     $0x80010001, %eax
1081   movl    %eax, %cr0
1082 
1083 
1084 
1085 
1086   
1087   movl $(stack + KSTACKSIZE), %esp
1088   
1089   
1090   
1091   
1092 
1093   movl $main, %edx
1094   jmp %edx
1095 
1096 .comm stack, KSTACKSIZE
1097 
1098 
1099 
1100 
1101 
1102 
1103 
1104 
1105 
1106 
1107 
1108 
1109 
1110 
1111 
1112 
1113 
1114 
1115 
1116 
1117 
1118 
1119 
1120 
1121 .code16
1122 .globl start
1123 start:
1124   cli
1125 
1126   
1127   xorw    %ax,%ax
1128   movw    %ax,%ds
1129   movw    %ax,%es
1130   movw    %ax,%ss
1131 
1132   
1133   
1134   
1135   lgdt    gdtdesc
1136   movl    %cr0, %eax
1137   orl     $CR0_PE, %eax
1138   movl    %eax, %cr0
1139 
1140   
1141   
1142   
1143   ljmpl    $(SEG_KCODE<<3), $(start32)
1144 
1145 
1146 
1147 
1148 
1149 
1150 .code32  
1151 start32:
1152   
1153   movw    $(SEG_KDATA<<3), %ax    
1154   movw    %ax, %ds                
1155   movw    %ax, %es                
1156   movw    %ax, %ss                
1157   movw    $0, %ax                 
1158   movw    %ax, %fs                
1159   movw    %ax, %gs                
1160 
1161   
1162   movl    %cr4, %eax
1163   orl     $(CR4_PSE), %eax
1164   movl    %eax, %cr4
1165   
1166   movl    (start-12), %eax
1167   movl    %eax, %cr3
1168   
1169   movl    %cr0, %eax
1170   orl     $(CR0_PE|CR0_PG|CR0_WP), %eax
1171   movl    %eax, %cr0
1172 
1173   
1174   movl    (start-4), %esp
1175   
1176   call	 *(start-8)
1177 
1178   movw    $0x8a00, %ax
1179   movw    %ax, %dx
1180   outw    %ax, %dx
1181   movw    $0x8ae0, %ax
1182   outw    %ax, %dx
1183 spin:
1184   jmp     spin
1185 
1186 .p2align 2
1187 gdt:
1188   SEG_NULLASM
1189   SEG_ASM(STA_X|STA_R, 0, 0xffffffff)
1190   SEG_ASM(STA_W, 0, 0xffffffff)
1191 
1192 
1193 gdtdesc:
1194   .word   (gdtdesc - gdt - 1)
1195   .long   gdt
1196 
1197 
1198 
1199 
1200 #include "types.h"
1201 #include "defs.h"
1202 #include "param.h"
1203 #include "memlayout.h"
1204 #include "mmu.h"
1205 #include "proc.h"
1206 #include "x86.h"
1207 #include "mp_uefi.h"
1208 #include "debug.h"
1209 #include "graphic.h"
1210 #include "font.h"
1211 #include "pci.h"
1212 #include "i8254.h"
1213 #include "arp.h"
1214 
1215 static void startothers(void);
1216 static void mpmain(void)  __attribute__((noreturn));
1217 extern pde_t *kpgdir;
1218 extern char end[]; 
1219 
1220 
1221 
1222 
1223 int
1224 main(void)
1225 {
1226   graphic_init();
1227   kinit1(end, P2V(4*1024*1024)); 
1228   kvmalloc();      
1229   mpinit_uefi();
1230   lapicinit();     
1231   seginit();       
1232   picinit();    
1233   ioapicinit();    
1234   consoleinit();   
1235   uartinit();      
1236   pinit();         
1237   tvinit();        
1238   binit();         
1239   fileinit();      
1240   ideinit();       
1241   startothers();   
1242   kinit2(P2V(4*1024*1024), P2V(PHYSTOP)); 
1243   pci_init();
1244   arp_scan();
1245   
1246   userinit();      
1247 
1248   mpmain();        
1249 }
1250 
1251 static void
1252 mpenter(void)
1253 {
1254   switchkvm();
1255   seginit();
1256   lapicinit();
1257   mpmain();
1258 }
1259 
1260 
1261 static void
1262 mpmain(void)
1263 {
1264   cprintf("cpu%d: starting %d\n", cpuid(), cpuid());
1265   idtinit();       
1266   xchg(&(mycpu()->started), 1); 
1267   scheduler();     
1268 }
1269 
1270 pde_t entrypgdir[];  
1271 
1272 
1273 static void
1274 startothers(void)
1275 {
1276   extern uchar _binary_entryother_start[], _binary_entryother_size[];
1277   uchar *code;
1278   struct cpu *c;
1279   char *stack;
1280 
1281   
1282   
1283   
1284   code = P2V(0x7000);
1285   memmove(code, _binary_entryother_start, (uint)_binary_entryother_size);
1286 
1287   for(c = cpus; c < cpus+ncpu; c++){
1288     if(c == mycpu()){  
1289       continue;
1290     }
1291     
1292     
1293     
1294     stack = kalloc();
1295     *(void**)(code-4) = stack + KSTACKSIZE;
1296     *(void**)(code-8) = mpenter;
1297     *(int**)(code-12) = (void *) V2P(entrypgdir);
1298 
1299     lapicstartap(c->apicid, V2P(code));
1300     
1301     while(c->started == 0)
1302       ;
1303   }
1304 }
1305 
1306 
1307 
1308 
1309 
1310 
1311 __attribute__((__aligned__(PGSIZE)))
1312 pde_t entrypgdir[NPDENTRIES] = {
1313   
1314   [0] = (0) | PTE_P | PTE_W | PTE_PS,
1315   
1316   [KERNBASE>>PDXSHIFT] = (0) | PTE_P | PTE_W | PTE_PS,
1317 };
1318 
1319 
1320 
1321 
1322 
1323 
1324 
1325 
1326 
1327 
1328 
1329 
1330 
1331 
1332 
1333 
1334 
1335 
1336 
1337 
1338 
1339 
1340 
1341 
1342 
1343 
1344 
1345 
1346 
1347 
1348 
1349 
1350 
1351 
1352 
1353 
1354 
1355 
1356 
1357 
1358 
1359 
1360 
1361 
1362 
1363 
1364 
1365 
1366 
1367 
1368 
1369 
1370 
1371 
1372 
1373 
1374 
1375 
1376 
1377 
1378 
1379 
1380 
1381 
1382 
1383 
1384 
1385 
1386 
1387 
1388 
1389 
1390 
1391 
1392 
1393 
1394 
1395 
1396 
1397 
1398 
1399 
1400 
1401 
1402 
1403 
1404 
1405 
1406 
1407 
1408 
1409 
1410 
1411 
1412 
1413 
1414 
1415 
1416 
1417 
1418 
1419 
1420 
1421 
1422 
1423 
1424 
1425 
1426 
1427 
1428 
1429 
1430 
1431 
1432 
1433 
1434 
1435 
1436 
1437 
1438 
1439 
1440 
1441 
1442 
1443 
1444 
1445 
1446 
1447 
1448 
1449 
1450 
1451 
1452 
1453 
1454 
1455 
1456 
1457 
1458 
1459 
1460 
1461 
1462 
1463 
1464 
1465 
1466 
1467 
1468 
1469 
1470 
1471 
1472 
1473 
1474 
1475 
1476 
1477 
1478 
1479 
1480 
1481 
1482 
1483 
1484 
1485 
1486 
1487 
1488 
1489 
1490 
1491 
1492 
1493 
1494 
1495 
1496 
1497 
1498 
1499 
1500 
1501 struct spinlock {
1502   uint locked;       
1503 
1504   
1505   char *name;        
1506   struct cpu *cpu;   
1507   uint pcs[10];      
1508                      
1509 };
1510 
1511 
1512 
1513 
1514 
1515 
1516 
1517 
1518 
1519 
1520 
1521 
1522 
1523 
1524 
1525 
1526 
1527 
1528 
1529 
1530 
1531 
1532 
1533 
1534 
1535 
1536 
1537 
1538 
1539 
1540 
1541 
1542 
1543 
1544 
1545 
1546 
1547 
1548 
1549 
1550 
1551 
1552 #include "types.h"
1553 #include "defs.h"
1554 #include "param.h"
1555 #include "x86.h"
1556 #include "memlayout.h"
1557 #include "mmu.h"
1558 #include "proc.h"
1559 #include "spinlock.h"
1560 
1561 void
1562 initlock(struct spinlock *lk, char *name)
1563 {
1564   lk->name = name;
1565   lk->locked = 0;
1566   lk->cpu = 0;
1567 }
1568 
1569 
1570 
1571 
1572 
1573 void
1574 acquire(struct spinlock *lk)
1575 {
1576   pushcli(); 
1577   if(holding(lk)){
1578     panic("acquire");
1579   }
1580 
1581   
1582   while(xchg(&lk->locked, 1) != 0)
1583     ;
1584 
1585   
1586   
1587   
1588   __sync_synchronize();
1589 
1590   
1591   lk->cpu = mycpu();
1592   getcallerpcs(&lk, lk->pcs);
1593 }
1594 
1595 
1596 
1597 
1598 
1599 
1600 
1601 void
1602 release(struct spinlock *lk)
1603 {
1604   if(!holding(lk))
1605     panic("release");
1606 
1607   lk->pcs[0] = 0;
1608   lk->cpu = 0;
1609 
1610   
1611   
1612   
1613   
1614   
1615   __sync_synchronize();
1616 
1617   
1618   
1619   
1620   asm volatile("movl $0, %0" : "+m" (lk->locked) : );
1621 
1622   popcli();
1623 }
1624 
1625 
1626 void
1627 getcallerpcs(void *v, uint pcs[])
1628 {
1629   uint *ebp;
1630   int i;
1631 
1632   ebp = (uint*)v - 2;
1633   for(i = 0; i < 10; i++){
1634     if(ebp == 0 || ebp < (uint*)KERNBASE || ebp == (uint*)0xffffffff)
1635       break;
1636     pcs[i] = ebp[1];     
1637     ebp = (uint*)ebp[0]; 
1638   }
1639   for(; i < 10; i++)
1640     pcs[i] = 0;
1641 }
1642 
1643 
1644 int
1645 holding(struct spinlock *lock)
1646 {
1647   return lock->locked && lock->cpu == mycpu();
1648 }
1649 
1650 
1651 
1652 
1653 
1654 void
1655 pushcli(void)
1656 {
1657   int eflags;
1658 
1659   eflags = readeflags();
1660   cli();
1661   if(mycpu()->ncli == 0)
1662     mycpu()->intena = eflags & FL_IF;
1663   mycpu()->ncli += 1;
1664 }
1665 
1666 void
1667 popcli(void)
1668 {
1669   if(readeflags()&FL_IF)
1670     panic("popcli - interruptible");
1671   if(--mycpu()->ncli < 0)
1672     panic("popcli");
1673   if(mycpu()->ncli == 0 && mycpu()->intena)
1674     sti();
1675 }
1676 
1677 
1678 
1679 
1680 
1681 
1682 
1683 
1684 
1685 
1686 
1687 
1688 
1689 
1690 
1691 
1692 
1693 
1694 
1695 
1696 
1697 
1698 
1699 
1700 #include "param.h"
1701 #include "types.h"
1702 #include "defs.h"
1703 #include "x86.h"
1704 #include "memlayout.h"
1705 #include "mmu.h"
1706 #include "proc.h"
1707 #include "elf.h"
1708 #include "graphic.h"
1709 
1710 extern char data[];  
1711 pde_t *kpgdir;  
1712 
1713 extern struct gpu gpu;
1714 
1715 
1716 void
1717 seginit(void)
1718 {
1719   struct cpu *c;
1720 
1721   
1722   
1723   
1724   
1725   c = &cpus[cpuid()];
1726 
1727   c->gdt[SEG_KCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, 0);
1728   c->gdt[SEG_KDATA] = SEG(STA_W, 0, 0xffffffff, 0);
1729   c->gdt[SEG_UCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, DPL_USER);
1730   c->gdt[SEG_UDATA] = SEG(STA_W, 0, 0xffffffff, DPL_USER);
1731   lgdt(c->gdt, sizeof(c->gdt));
1732 }
1733 
1734 
1735 
1736 
1737 static pte_t *
1738 walkpgdir(pde_t *pgdir, const void *va, int alloc)
1739 {
1740   pde_t *pde;
1741   pte_t *pgtab;
1742 
1743   pde = &pgdir[PDX(va)];
1744   if(*pde & PTE_P){
1745     pgtab = (pte_t*)P2V(PTE_ADDR(*pde));
1746   } else {
1747     if(!alloc || (pgtab = (pte_t*)kalloc()) == 0)
1748       return 0;
1749     
1750     memset(pgtab, 0, PGSIZE);
1751     
1752     
1753     
1754     *pde = V2P(pgtab) | PTE_P | PTE_W | PTE_U;
1755   }
1756   return &pgtab[PTX(va)];
1757 }
1758 
1759 
1760 
1761 
1762 static int
1763 mappages(pde_t *pgdir, void *va, uint size, uint pa, int perm)
1764 {
1765   char *a, *last;
1766   pte_t *pte;
1767 
1768   a = (char*)PGROUNDDOWN((uint)va);
1769   last = (char*)PGROUNDDOWN(((uint)va) + size - 1);
1770   for(;;){
1771     if((pte = walkpgdir(pgdir, a, 1)) == 0)
1772       return -1;
1773     if(*pte & PTE_P)
1774       panic("remap");
1775     *pte = pa | perm | PTE_P;
1776     if(a == last)
1777       break;
1778     a += PGSIZE;
1779     pa += PGSIZE;
1780   }
1781   return 0;
1782 }
1783 
1784 
1785 
1786 
1787 
1788 
1789 
1790 
1791 
1792 
1793 
1794 
1795 
1796 
1797 
1798 
1799 
1800 
1801 
1802 
1803 
1804 
1805 
1806 
1807 static struct kmap {
1808   void *virt;
1809   uint phys_start;
1810   uint phys_end;
1811   int perm;
1812 } kmap[] = {
1813  { (void*)KERNBASE, 0,             EXTMEM,    PTE_W}, 
1814  { (void*)KERNLINK, V2P(KERNLINK), V2P(data), 0},     
1815  { (void*)data,     V2P(data),     PHYSTOP,   PTE_W}, 
1816  { 0,0,0,0},
1817  { (void*)(PCI_BAR_BASE + PCI_VP_OFFSET),PCI_BAR_BASE,0x10000000+PCI_BAR_BASE,PTE_W},
1818  { (void*)DEVSPACE, DEVSPACE, 0, PTE_W}, 
1819 };
1820 
1821 
1822 pde_t*
1823 setupkvm(void)
1824 {
1825   pde_t *pgdir;
1826   struct kmap *k;
1827   k = kmap;
1828   struct kmap vram = { (void*)(DEVSPACE - gpu.vram_size),gpu.pvram_addr,gpu.pvram_addr+gpu.vram_size, PTE_W};
1829   k[3] = vram;
1830   if((pgdir = (pde_t*)kalloc()) == 0){
1831     return 0;
1832   }
1833   memset(pgdir, 0, PGSIZE);
1834   if (P2V(PHYSTOP) > (void*)DEVSPACE)
1835     panic("PHYSTOP too high");
1836   for(k = kmap; k < &kmap[NELEM(kmap)]; k++)
1837     if(mappages(pgdir, k->virt, k->phys_end - k->phys_start,
1838                 (uint)k->phys_start, k->perm) < 0) {
1839       freevm(pgdir);
1840       return 0;
1841     }
1842   return pgdir;
1843 }
1844 
1845 
1846 
1847 
1848 
1849 
1850 
1851 
1852 void
1853 kvmalloc(void)
1854 {
1855   kpgdir = setupkvm();
1856   switchkvm();
1857 }
1858 
1859 
1860 
1861 void
1862 switchkvm(void)
1863 {
1864   lcr3(V2P(kpgdir));   
1865 }
1866 
1867 
1868 void
1869 switchuvm(struct proc *p)
1870 {
1871   if(p == 0)
1872     panic("switchuvm: no process");
1873   if(p->kstack == 0)
1874     panic("switchuvm: no kstack");
1875   if(p->pgdir == 0)
1876     panic("switchuvm: no pgdir");
1877 
1878   pushcli();
1879   mycpu()->gdt[SEG_TSS] = SEG16(STS_T32A, &mycpu()->ts,
1880                                 sizeof(mycpu()->ts)-1, 0);
1881   mycpu()->gdt[SEG_TSS].s = 0;
1882   mycpu()->ts.ss0 = SEG_KDATA << 3;
1883   mycpu()->ts.esp0 = (uint)p->kstack + KSTACKSIZE;
1884   
1885   
1886   mycpu()->ts.iomb = (ushort) 0xFFFF;
1887   ltr(SEG_TSS << 3);
1888   lcr3(V2P(p->pgdir));  
1889   popcli();
1890 }
1891 
1892 
1893 
1894 
1895 
1896 
1897 
1898 
1899 
1900 
1901 
1902 void
1903 inituvm(pde_t *pgdir, char *init, uint sz)
1904 {
1905   char *mem;
1906 
1907   if(sz >= PGSIZE)
1908     panic("inituvm: more than a page");
1909   mem = kalloc();
1910   memset(mem, 0, PGSIZE);
1911   mappages(pgdir, 0, PGSIZE, V2P(mem), PTE_W|PTE_U);
1912   memmove(mem, init, sz);
1913 }
1914 
1915 
1916 
1917 int
1918 loaduvm(pde_t *pgdir, char *addr, struct inode *ip, uint offset, uint sz)
1919 {
1920   uint i, pa, n;
1921   pte_t *pte;
1922 
1923   if((uint) addr % PGSIZE != 0)
1924     panic("loaduvm: addr must be page aligned");
1925   for(i = 0; i < sz; i += PGSIZE){
1926     if((pte = walkpgdir(pgdir, addr+i, 0)) == 0)
1927       panic("loaduvm: address should exist");
1928     pa = PTE_ADDR(*pte);
1929     if(sz - i < PGSIZE)
1930       n = sz - i;
1931     else
1932       n = PGSIZE;
1933     if(readi(ip, P2V(pa), offset+i, n) != n)
1934       return -1;
1935   }
1936   return 0;
1937 }
1938 
1939 
1940 
1941 
1942 
1943 
1944 
1945 
1946 
1947 
1948 
1949 
1950 
1951 
1952 int
1953 allocuvm(pde_t *pgdir, uint oldsz, uint newsz)
1954 {
1955   char *mem;
1956   uint a;
1957 
1958   if(newsz >= KERNBASE)
1959     return 0;
1960   if(newsz < oldsz)
1961     return oldsz;
1962 
1963   a = PGROUNDUP(oldsz);
1964   for(; a < newsz; a += PGSIZE){
1965     mem = kalloc();
1966     if(mem == 0){
1967       cprintf("allocuvm out of memory\n");
1968       deallocuvm(pgdir, newsz, oldsz);
1969       return 0;
1970     }
1971     memset(mem, 0, PGSIZE);
1972     if(mappages(pgdir, (char*)a, PGSIZE, V2P(mem), PTE_W|PTE_U) < 0){
1973       cprintf("allocuvm out of memory (2)\n");
1974       deallocuvm(pgdir, newsz, oldsz);
1975       kfree(mem);
1976       return 0;
1977     }
1978   }
1979   return newsz;
1980 }
1981 
1982 
1983 
1984 
1985 
1986 int
1987 deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)
1988 {
1989   pte_t *pte;
1990   uint a, pa;
1991 
1992   if(newsz >= oldsz)
1993     return oldsz;
1994 
1995   a = PGROUNDUP(newsz);
1996   for(; a  < oldsz; a += PGSIZE){
1997     pte = walkpgdir(pgdir, (char*)a, 0);
1998     if(!pte)
1999       a = PGADDR(PDX(a) + 1, 0, 0) - PGSIZE;
2000     else if((*pte & PTE_P) != 0){
2001       pa = PTE_ADDR(*pte);
2002       if(pa == 0)
2003         panic("kfree");
2004       char *v = P2V(pa);
2005       kfree(v);
2006       *pte = 0;
2007     }
2008   }
2009   return newsz;
2010 }
2011 
2012 
2013 
2014 void
2015 freevm(pde_t *pgdir)
2016 {
2017   uint i;
2018 
2019   if(pgdir == 0)
2020     panic("freevm: no pgdir");
2021   deallocuvm(pgdir, KERNBASE, 0);
2022   for(i = 0; i < NPDENTRIES; i++){
2023     if(pgdir[i] & PTE_P){
2024       char * v = P2V(PTE_ADDR(pgdir[i]));
2025       kfree(v);
2026     }
2027   }
2028   kfree((char*)pgdir);
2029 }
2030 
2031 
2032 
2033 void
2034 clearpteu(pde_t *pgdir, char *uva)
2035 {
2036   pte_t *pte;
2037 
2038   pte = walkpgdir(pgdir, uva, 0);
2039   if(pte == 0)
2040     panic("clearpteu");
2041   *pte &= ~PTE_U;
2042 }
2043 
2044 
2045 
2046 
2047 
2048 
2049 
2050 
2051 
2052 pde_t*
2053 copyuvm(pde_t *pgdir, uint sz)
2054 {
2055   pde_t *d;
2056   pte_t *pte;
2057   uint pa, i, flags;
2058   char *mem;
2059 
2060   if((d = setupkvm()) == 0)
2061     return 0;
2062   for(i = 0; i < sz; i += PGSIZE){
2063     if((pte = walkpgdir(pgdir, (void *) i, 0)) == 0)
2064       panic("copyuvm: pte should exist");
2065     if(!(*pte & PTE_P))
2066       panic("copyuvm: page not present");
2067     pa = PTE_ADDR(*pte);
2068     flags = PTE_FLAGS(*pte);
2069     if((mem = kalloc()) == 0)
2070       goto bad;
2071     memmove(mem, (char*)P2V(pa), PGSIZE);
2072     if(mappages(d, (void*)i, PGSIZE, V2P(mem), flags) < 0)
2073       goto bad;
2074   }
2075   return d;
2076 
2077 bad:
2078   freevm(d);
2079   return 0;
2080 }
2081 
2082 
2083 
2084 
2085 
2086 
2087 
2088 
2089 
2090 
2091 
2092 
2093 
2094 
2095 
2096 
2097 
2098 
2099 
2100 
2101 char*
2102 uva2ka(pde_t *pgdir, char *uva)
2103 {
2104   pte_t *pte;
2105 
2106   pte = walkpgdir(pgdir, uva, 0);
2107   if((*pte & PTE_P) == 0)
2108     return 0;
2109   if((*pte & PTE_U) == 0)
2110     return 0;
2111   return (char*)P2V(PTE_ADDR(*pte));
2112 }
2113 
2114 
2115 
2116 
2117 int
2118 copyout(pde_t *pgdir, uint va, void *p, uint len)
2119 {
2120   char *buf, *pa0;
2121   uint n, va0;
2122 
2123   buf = (char*)p;
2124   while(len > 0){
2125     va0 = (uint)PGROUNDDOWN(va);
2126     pa0 = uva2ka(pgdir, (char*)va0);
2127     if(pa0 == 0)
2128       return -1;
2129     n = PGSIZE - (va - va0);
2130     if(n > len)
2131       n = len;
2132     memmove(pa0 + (va - va0), buf, n);
2133     len -= n;
2134     buf += n;
2135     va = va0 + PGSIZE;
2136   }
2137   return 0;
2138 }
2139 
2140 
2141 
2142 
2143 
2144 
2145 
2146 
2147 
2148 
2149 
2150 
2151 
2152 
2153 
2154 
2155 
2156 
2157 
2158 
2159 
2160 
2161 
2162 
2163 
2164 
2165 
2166 
2167 
2168 
2169 
2170 
2171 
2172 
2173 
2174 
2175 
2176 
2177 
2178 
2179 
2180 
2181 
2182 
2183 
2184 
2185 
2186 
2187 
2188 
2189 
2190 
2191 
2192 
2193 
2194 
2195 
2196 
2197 
2198 
2199 
2200 
2201 
2202 
2203 
2204 
2205 
2206 
2207 
2208 
2209 
2210 
2211 
2212 
2213 
2214 
2215 
2216 
2217 
2218 
2219 
2220 
2221 
2222 
2223 
2224 
2225 
2226 
2227 
2228 
2229 
2230 
2231 
2232 
2233 
2234 
2235 
2236 
2237 
2238 
2239 
2240 
2241 
2242 
2243 
2244 
2245 
2246 
2247 
2248 
2249 
2250 
2251 
2252 
2253 
2254 
2255 
2256 
2257 
2258 
2259 
2260 
2261 
2262 
2263 
2264 
2265 
2266 
2267 
2268 
2269 
2270 
2271 
2272 
2273 
2274 
2275 
2276 
2277 
2278 
2279 
2280 
2281 
2282 
2283 
2284 
2285 
2286 
2287 
2288 
2289 
2290 
2291 
2292 
2293 
2294 
2295 
2296 
2297 
2298 
2299 
2300 
2301 struct cpu {
2302   uchar apicid;                
2303   struct context *scheduler;   
2304   struct taskstate ts;         
2305   struct segdesc gdt[NSEGS];   
2306   volatile uint started;       
2307   int ncli;                    
2308   int intena;                  
2309   struct proc *proc;           
2310 };
2311 
2312 extern struct cpu cpus[NCPU];
2313 extern int ncpu;
2314 
2315 
2316 
2317 
2318 
2319 
2320 
2321 
2322 
2323 
2324 
2325 
2326 struct context {
2327   uint edi;
2328   uint esi;
2329   uint ebx;
2330   uint ebp;
2331   uint eip;
2332 };
2333 
2334 enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };
2335 
2336 
2337 struct proc {
2338   uint sz;                     
2339   pde_t* pgdir;                
2340   char *kstack;                
2341   enum procstate state;        
2342   int pid;                     
2343   struct proc *parent;         
2344   struct trapframe *tf;        
2345   struct context *context;     
2346   void *chan;                  
2347   int killed;                  
2348   struct file *ofile[NOFILE];  
2349   struct inode *cwd;           
2350   char name[16];               
2351   int xstate;
2352 };
2353 
2354 
2355 
2356 
2357 
2358 
2359 
2360 
2361 
2362 
2363 
2364 
2365 
2366 
2367 
2368 
2369 
2370 
2371 
2372 
2373 
2374 
2375 
2376 
2377 
2378 
2379 
2380 
2381 
2382 
2383 
2384 
2385 
2386 
2387 
2388 
2389 
2390 
2391 
2392 
2393 
2394 
2395 
2396 
2397 
2398 
2399 
2400 #include "types.h"
2401 #include "defs.h"
2402 #include "param.h"
2403 #include "memlayout.h"
2404 #include "mmu.h"
2405 #include "x86.h"
2406 #include "proc.h"
2407 #include "spinlock.h"
2408 #include "debug.h"
2409 
2410 struct {
2411   struct spinlock lock;
2412   struct proc proc[NPROC];
2413 } ptable;
2414 
2415 static struct proc *initproc;
2416 
2417 int nextpid = 1;
2418 extern void forkret(void);
2419 extern void trapret(void);
2420 
2421 static void wakeup1(void *chan);
2422 
2423 void
2424 pinit(void)
2425 {
2426   initlock(&ptable.lock, "ptable");
2427 }
2428 
2429 
2430 int
2431 cpuid() {
2432   return mycpu()-cpus;
2433 }
2434 
2435 
2436 
2437 struct cpu*
2438 mycpu(void)
2439 {
2440   int apicid, i;
2441 
2442   if(readeflags()&FL_IF){
2443     panic("mycpu called with interrupts enabled\n");
2444   }
2445 
2446 
2447 
2448 
2449 
2450   apicid = lapicid();
2451   
2452   
2453   for (i = 0; i < ncpu; ++i) {
2454     if (cpus[i].apicid == apicid){
2455       return &cpus[i];
2456     }
2457   }
2458   panic("unknown apicid\n");
2459 }
2460 
2461 
2462 
2463 struct proc*
2464 myproc(void) {
2465   struct cpu *c;
2466   struct proc *p;
2467   pushcli();
2468   c = mycpu();
2469   p = c->proc;
2470   popcli();
2471   return p;
2472 }
2473 
2474 
2475 
2476 
2477 
2478 
2479 
2480 
2481 
2482 
2483 
2484 
2485 
2486 
2487 
2488 
2489 
2490 
2491 
2492 
2493 
2494 
2495 
2496 
2497 
2498 
2499 
2500 
2501 
2502 
2503 
2504 static struct proc*
2505 allocproc(void)
2506 {
2507   struct proc *p;
2508   char *sp;
2509 
2510   acquire(&ptable.lock);
2511 
2512   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
2513     if(p->state == UNUSED){
2514       goto found;
2515     }
2516 
2517   release(&ptable.lock);
2518   return 0;
2519 
2520 found:
2521   p->state = EMBRYO;
2522   p->pid = nextpid++;
2523 
2524   release(&ptable.lock);
2525 
2526 
2527   
2528   if((p->kstack = kalloc()) == 0){
2529     p->state = UNUSED;
2530     return 0;
2531   }
2532   sp = p->kstack + KSTACKSIZE;
2533 
2534   
2535   sp -= sizeof *p->tf;
2536   p->tf = (struct trapframe*)sp;
2537 
2538   
2539   
2540   sp -= 4;
2541   *(uint*)sp = (uint)trapret;
2542 
2543   sp -= sizeof *p->context;
2544   p->context = (struct context*)sp;
2545   memset(p->context, 0, sizeof *p->context);
2546   p->context->eip = (uint)forkret;
2547 
2548   return p;
2549 }
2550 
2551 
2552 void
2553 userinit(void)
2554 {
2555   struct proc *p;
2556   extern char _binary_initcode_start[], _binary_initcode_size[];
2557 
2558   p = allocproc();
2559 
2560   initproc = p;
2561   if((p->pgdir = setupkvm()) == 0){
2562     panic("userinit: out of memory?");
2563   }
2564   inituvm(p->pgdir, _binary_initcode_start, (int)_binary_initcode_size);
2565   p->sz = PGSIZE;
2566   memset(p->tf, 0, sizeof(*p->tf));
2567   p->tf->cs = (SEG_UCODE << 3) | DPL_USER;
2568   p->tf->ds = (SEG_UDATA << 3) | DPL_USER;
2569   p->tf->es = p->tf->ds;
2570   p->tf->ss = p->tf->ds;
2571   p->tf->eflags = FL_IF;
2572   p->tf->esp = PGSIZE;
2573   p->tf->eip = 0;  
2574 
2575   safestrcpy(p->name, "initcode", sizeof(p->name));
2576   p->cwd = namei("/");
2577 
2578   
2579   
2580   
2581   
2582   acquire(&ptable.lock);
2583 
2584   p->state = RUNNABLE;
2585 
2586   release(&ptable.lock);
2587 }
2588 
2589 
2590 
2591 
2592 
2593 
2594 
2595 
2596 
2597 
2598 
2599 
2600 
2601 
2602 int
2603 growproc(int n)
2604 {
2605   uint sz;
2606   struct proc *curproc = myproc();
2607 
2608   sz = curproc->sz;
2609   if(n > 0){
2610     if((sz = allocuvm(curproc->pgdir, sz, sz + n)) == 0)
2611       return -1;
2612   } else if(n < 0){
2613     if((sz = deallocuvm(curproc->pgdir, sz, sz + n)) == 0)
2614       return -1;
2615   }
2616   curproc->sz = sz;
2617   switchuvm(curproc);
2618   return 0;
2619 }
2620 
2621 
2622 
2623 
2624 int
2625 fork(void)
2626 {
2627   int i, pid;
2628   struct proc *np;
2629   struct proc *curproc = myproc();
2630 
2631   
2632   if((np = allocproc()) == 0){
2633     return -1;
2634   }
2635 
2636   
2637   if((np->pgdir = copyuvm(curproc->pgdir, curproc->sz)) == 0){
2638     kfree(np->kstack);
2639     np->kstack = 0;
2640     np->state = UNUSED;
2641     return -1;
2642   }
2643   np->sz = curproc->sz;
2644   np->parent = curproc;
2645   *np->tf = *curproc->tf;
2646 
2647   
2648   np->tf->eax = 0;
2649 
2650   for(i = 0; i < NOFILE; i++)
2651     if(curproc->ofile[i])
2652       np->ofile[i] = filedup(curproc->ofile[i]);
2653   np->cwd = idup(curproc->cwd);
2654 
2655   safestrcpy(np->name, curproc->name, sizeof(curproc->name));
2656 
2657   pid = np->pid;
2658 
2659   acquire(&ptable.lock);
2660 
2661   np->state = RUNNABLE;
2662 
2663   release(&ptable.lock);
2664 
2665   return pid;
2666 }
2667 
2668 
2669 
2670 
2671 void
2672 exit(void)
2673 {
2674   struct proc *curproc = myproc();
2675   struct proc *p;
2676   int fd;
2677 
2678   if(curproc == initproc)
2679     panic("init exiting");
2680 
2681   
2682   for(fd = 0; fd < NOFILE; fd++){
2683     if(curproc->ofile[fd]){
2684       fileclose(curproc->ofile[fd]);
2685       curproc->ofile[fd] = 0;
2686     }
2687   }
2688 
2689   begin_op();
2690   iput(curproc->cwd);
2691   end_op();
2692   curproc->cwd = 0;
2693 
2694   acquire(&ptable.lock);
2695 
2696   
2697   wakeup1(curproc->parent);
2698 
2699 
2700   
2701   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
2702     if(p->parent == curproc){
2703       p->parent = initproc;
2704       if(p->state == ZOMBIE)
2705         wakeup1(initproc);
2706     }
2707   }
2708 
2709   
2710   curproc->state = ZOMBIE;
2711   sched();
2712   panic("zombie exit");
2713 }
2714 
2715 
2716 
2717 
2718 
2719 void
2720 exit2(int status){
2721   struct proc *curproc = myproc();
2722   struct proc *p;
2723   int fd;
2724 
2725   
2726   curproc->xstate = status;
2727   
2728 
2729   if(curproc == initproc)
2730     panic("init exiting");
2731 
2732   
2733   for(fd = 0; fd < NOFILE; fd++){
2734     if(curproc->ofile[fd]){
2735       fileclose(curproc->ofile[fd]);
2736       curproc->ofile[fd] = 0;
2737     }
2738   }
2739 
2740   begin_op();
2741   iput(curproc->cwd);
2742   end_op();
2743   curproc->cwd = 0;
2744 
2745   acquire(&ptable.lock);
2746 
2747   
2748   wakeup1(curproc->parent);
2749 
2750   
2751   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
2752     if(p->parent == curproc){
2753       p->parent = initproc;
2754       if(p->state == ZOMBIE)
2755         wakeup1(initproc);
2756     }
2757   }
2758 
2759   
2760   curproc->state = ZOMBIE;
2761   sched();
2762   panic("zombie exit");
2763 }
2764 
2765 
2766 
2767 
2768 
2769 
2770 
2771 
2772 
2773 int
2774 wait(void)
2775 {
2776   struct proc *p;
2777   int havekids, pid;
2778   struct proc *curproc = myproc();
2779 
2780   acquire(&ptable.lock);
2781   for(;;){
2782     
2783     havekids = 0;
2784     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
2785       if(p->parent != curproc)
2786         continue;
2787       havekids = 1;
2788       if(p->state == ZOMBIE){
2789         
2790         pid = p->pid;
2791         kfree(p->kstack);
2792         p->kstack = 0;
2793         freevm(p->pgdir);
2794         p->pid = 0;
2795         p->parent = 0;
2796         p->name[0] = 0;
2797         p->killed = 0;
2798         p->state = UNUSED;
2799         release(&ptable.lock);
2800         return pid;
2801       }
2802     }
2803 
2804     
2805     if(!havekids || curproc->killed){
2806       release(&ptable.lock);
2807       return -1;
2808     }
2809 
2810     
2811     sleep(curproc, &ptable.lock);  
2812   }
2813 }
2814 
2815 
2816 
2817 
2818 
2819 
2820 int
2821 wait2(int *status){
2822 
2823   struct proc *p;
2824   int havekids, pid;
2825   struct proc *curproc = myproc();
2826 
2827 
2828   
2829   
2830   
2831   
2832   
2833   
2834 	  
2835 
2836   acquire(&ptable.lock);
2837   for(;;){
2838     
2839     havekids = 0;
2840     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
2841       if(p->parent != curproc)
2842         continue;
2843       havekids = 1;
2844       if(p->state == ZOMBIE){
2845         
2846         pid = p->pid;
2847         kfree(p->kstack);
2848         p->kstack = 0;
2849         freevm(p->pgdir);
2850         p->pid = 0;
2851         p->parent = 0;
2852         p->name[0] = 0;
2853         p->killed = 0;
2854         p->state = UNUSED;
2855         release(&ptable.lock);
2856         return pid;
2857       }
2858     }
2859 
2860     
2861     if(!havekids || curproc->killed){
2862       release(&ptable.lock);
2863       return -1;
2864     }
2865 
2866   
2867   
2868   
2869   
2870   
2871   
2872     
2873     sleep(curproc, &ptable.lock);  
2874 
2875     if (copyout(curproc->pgdir, *status, &(curproc->xstate), sizeof(int)) < 0)
2876 	    return -1;
2877 
2878     
2879     
2880   }
2881 }
2882 
2883 
2884 
2885 
2886 
2887 
2888 
2889 
2890 
2891 
2892 
2893 
2894 
2895 
2896 
2897 
2898 
2899 
2900 
2901 
2902 
2903 
2904 
2905 
2906 
2907 void
2908 scheduler(void)
2909 {
2910   struct proc *p;
2911   struct cpu *c = mycpu();
2912   c->proc = 0;
2913 
2914   for(;;){
2915     
2916     sti();
2917 
2918     
2919     acquire(&ptable.lock);
2920     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
2921       if(p->state != RUNNABLE)
2922         continue;
2923 
2924       
2925       
2926       
2927       c->proc = p;
2928       switchuvm(p);
2929       p->state = RUNNING;
2930 
2931       swtch(&(c->scheduler), p->context);
2932       switchkvm();
2933 
2934       
2935       
2936       c->proc = 0;
2937     }
2938     release(&ptable.lock);
2939 
2940   }
2941 }
2942 
2943 
2944 
2945 
2946 
2947 
2948 
2949 
2950 
2951 
2952 
2953 
2954 
2955 
2956 
2957 void
2958 sched(void)
2959 {
2960   int intena;
2961   struct proc *p = myproc();
2962 
2963   if(!holding(&ptable.lock))
2964     panic("sched ptable.lock");
2965   if(mycpu()->ncli != 1)
2966     panic("sched locks");
2967   if(p->state == RUNNING)
2968     panic("sched running");
2969   if(readeflags()&FL_IF)
2970     panic("sched interruptible");
2971   intena = mycpu()->intena;
2972   swtch(&p->context, mycpu()->scheduler);
2973   mycpu()->intena = intena;
2974 }
2975 
2976 
2977 void
2978 yield(void)
2979 {
2980   acquire(&ptable.lock);  
2981   myproc()->state = RUNNABLE;
2982   sched();
2983   release(&ptable.lock);
2984 }
2985 
2986 
2987 
2988 
2989 
2990 
2991 
2992 
2993 
2994 
2995 
2996 
2997 
2998 
2999 
3000 
3001 
3002 void
3003 forkret(void)
3004 {
3005   static int first = 1;
3006   
3007   release(&ptable.lock);
3008 
3009   if (first) {
3010     
3011     
3012     
3013     first = 0;
3014     iinit(ROOTDEV);
3015     initlog(ROOTDEV);
3016   }
3017 
3018   
3019 }
3020 
3021 
3022 
3023 void
3024 sleep(void *chan, struct spinlock *lk)
3025 {
3026   struct proc *p = myproc();
3027 
3028   if(p == 0)
3029     panic("sleep");
3030 
3031   if(lk == 0)
3032     panic("sleep without lk");
3033 
3034   
3035   
3036   
3037   
3038   
3039   
3040   if(lk != &ptable.lock){  
3041     acquire(&ptable.lock);  
3042     release(lk);
3043   }
3044   
3045   p->chan = chan;
3046   p->state = SLEEPING;
3047 
3048   sched();
3049 
3050   
3051   p->chan = 0;
3052 
3053   
3054   if(lk != &ptable.lock){  
3055     release(&ptable.lock);
3056     acquire(lk);
3057   }
3058 }
3059 
3060 
3061 
3062 
3063 
3064 
3065 
3066 
3067 
3068 
3069 
3070 
3071 
3072 
3073 
3074 
3075 
3076 
3077 
3078 
3079 
3080 
3081 
3082 
3083 
3084 
3085 
3086 
3087 
3088 
3089 
3090 
3091 
3092 
3093 
3094 
3095 
3096 
3097 
3098 
3099 
3100 
3101 
3102 static void
3103 wakeup1(void *chan)
3104 {
3105   struct proc *p;
3106 
3107   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
3108     if(p->state == SLEEPING && p->chan == chan)
3109       p->state = RUNNABLE;
3110 }
3111 
3112 
3113 void
3114 wakeup(void *chan)
3115 {
3116   acquire(&ptable.lock);
3117   wakeup1(chan);
3118   release(&ptable.lock);
3119 }
3120 
3121 
3122 
3123 
3124 int
3125 kill(int pid)
3126 {
3127   struct proc *p;
3128 
3129   acquire(&ptable.lock);
3130   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
3131     if(p->pid == pid){
3132       p->killed = 1;
3133       
3134       if(p->state == SLEEPING)
3135         p->state = RUNNABLE;
3136       release(&ptable.lock);
3137       return 0;
3138     }
3139   }
3140   release(&ptable.lock);
3141   return -1;
3142 }
3143 
3144 
3145 
3146 
3147 
3148 
3149 
3150 
3151 
3152 
3153 void
3154 procdump(void)
3155 {
3156   static char *states[] = {
3157   [UNUSED]    "unused",
3158   [EMBRYO]    "embryo",
3159   [SLEEPING]  "sleep ",
3160   [RUNNABLE]  "runble",
3161   [RUNNING]   "run   ",
3162   [ZOMBIE]    "zombie"
3163   };
3164   int i;
3165   struct proc *p;
3166   char *state;
3167   uint pc[10];
3168 
3169   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
3170     if(p->state == UNUSED)
3171       continue;
3172     if(p->state >= 0 && p->state < NELEM(states) && states[p->state])
3173       state = states[p->state];
3174     else
3175       state = "???";
3176     cprintf("%d %s %s", p->pid, state, p->name);
3177     if(p->state == SLEEPING){
3178       getcallerpcs((uint*)p->context->ebp+2, pc);
3179       for(i=0; i<10 && pc[i] != 0; i++)
3180         cprintf(" %p", pc[i]);
3181     }
3182     cprintf("\n");
3183   }
3184 }
3185 
3186 
3187 
3188 
3189 
3190 
3191 
3192 
3193 
3194 
3195 
3196 
3197 
3198 
3199 
3200 
3201 
3202 
3203 
3204 
3205 
3206 
3207 
3208 .globl swtch
3209 swtch:
3210   movl 4(%esp), %eax
3211   movl 8(%esp), %edx
3212 
3213   
3214   pushl %ebp
3215   pushl %ebx
3216   pushl %esi
3217   pushl %edi
3218 
3219   
3220   movl %esp, (%eax)
3221   movl %edx, %esp
3222 
3223   
3224   popl %edi
3225   popl %esi
3226   popl %ebx
3227   popl %ebp
3228   ret
3229 
3230 
3231 
3232 
3233 
3234 
3235 
3236 
3237 
3238 
3239 
3240 
3241 
3242 
3243 
3244 
3245 
3246 
3247 
3248 
3249 
3250 
3251 
3252 
3253 
3254 #include "types.h"
3255 #include "defs.h"
3256 #include "param.h"
3257 #include "memlayout.h"
3258 #include "mmu.h"
3259 #include "spinlock.h"
3260 
3261 void freerange(void *vstart, void *vend);
3262 extern char end[]; 
3263                    
3264 
3265 struct run {
3266   struct run *next;
3267 };
3268 
3269 struct {
3270   struct spinlock lock;
3271   int use_lock;
3272   struct run *freelist;
3273 } kmem;
3274 
3275 
3276 
3277 
3278 
3279 
3280 void
3281 kinit1(void *vstart, void *vend)
3282 {
3283   initlock(&kmem.lock, "kmem");
3284   kmem.use_lock = 0;
3285   freerange(vstart, vend);
3286 }
3287 
3288 void
3289 kinit2(void *vstart, void *vend)
3290 {
3291   freerange(vstart, vend);
3292   kmem.use_lock = 1;
3293 }
3294 
3295 
3296 
3297 
3298 
3299 
3300 void
3301 freerange(void *vstart, void *vend)
3302 {
3303   char *p;
3304   p = (char*)PGROUNDUP((uint)vstart);
3305   for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
3306     kfree(p);
3307 }
3308 
3309 
3310 
3311 
3312 
3313 void
3314 kfree(char *v)
3315 {
3316   struct run *r;
3317 
3318   if((uint)v % PGSIZE || v < end || V2P(v) >= PHYSTOP)
3319     panic("kfree");
3320 
3321   
3322   memset(v, 1, PGSIZE);
3323 
3324   if(kmem.use_lock)
3325     acquire(&kmem.lock);
3326   r = (struct run*)v;
3327   r->next = kmem.freelist;
3328   kmem.freelist = r;
3329   if(kmem.use_lock)
3330     release(&kmem.lock);
3331 }
3332 
3333 
3334 
3335 
3336 char*
3337 kalloc(void)
3338 {
3339   struct run *r;
3340 
3341   if(kmem.use_lock)
3342     acquire(&kmem.lock);
3343   r = kmem.freelist;
3344   if(r)
3345     kmem.freelist = r->next;
3346   if(kmem.use_lock)
3347     release(&kmem.lock);
3348   return (char*)r;
3349 }
3350 
3351 
3352 
3353 #define T_DIVIDE         0      
3354 #define T_DEBUG          1      
3355 #define T_NMI            2      
3356 #define T_BRKPT          3      
3357 #define T_OFLOW          4      
3358 #define T_BOUND          5      
3359 #define T_ILLOP          6      
3360 #define T_DEVICE         7      
3361 #define T_DBLFLT         8      
3362 
3363 #define T_TSS           10      
3364 #define T_SEGNP         11      
3365 #define T_STACK         12      
3366 #define T_GPFLT         13      
3367 #define T_PGFLT         14      
3368 
3369 #define T_FPERR         16      
3370 #define T_ALIGN         17      
3371 #define T_MCHK          18      
3372 #define T_SIMDERR       19      
3373 
3374 
3375 
3376 #define T_SYSCALL       64      
3377 #define T_DEFAULT      500      
3378 
3379 #define T_IRQ0          32      
3380 
3381 #define IRQ_TIMER        0
3382 #define IRQ_KBD          1
3383 #define IRQ_COM1         4
3384 #define IRQ_IDE         14
3385 #define IRQ_ERROR       19
3386 #define IRQ_SPURIOUS    31
3387 
3388 
3389 
3390 
3391 
3392 
3393 
3394 
3395 
3396 
3397 
3398 
3399 
3400 #!/usr/bin/perl -w
3401 
3402 # Generate vectors.S, the trap/interrupt entry points.
3403 # There has to be one entry point per interrupt number
3404 # since otherwise there's no way for trap() to discover
3405 # the interrupt number.
3406 
3407 print "# generated by vectors.pl - do not edit\n";
3408 print "# handlers\n";
3409 print ".globl alltraps\n";
3410 for(my $i = 0; $i < 256; $i++){
3411     print ".globl vector$i\n";
3412     print "vector$i:\n";
3413     if(!($i == 8 || ($i >= 10 && $i <= 14) || $i == 17)){
3414         print "  pushl \$0\n";
3415     }
3416     print "  pushl \$$i\n";
3417     print "  jmp alltraps\n";
3418 }
3419 
3420 print "\n# vector table\n";
3421 print ".data\n";
3422 print ".globl vectors\n";
3423 print "vectors:\n";
3424 for(my $i = 0; $i < 256; $i++){
3425     print "  .long vector$i\n";
3426 }
3427 
3428 # sample output:
3429 #   # handlers
3430 #   .globl alltraps
3431 #   .globl vector0
3432 #   vector0:
3433 #     pushl $0
3434 #     pushl $0
3435 #     jmp alltraps
3436 #   ...
3437 #
3438 #   # vector table
3439 #   .data
3440 #   .globl vectors
3441 #   vectors:
3442 #     .long vector0
3443 #     .long vector1
3444 #     .long vector2
3445 #   ...
3446 
3447 
3448 
3449 
3450 
3451 
3452   
3453 .globl alltraps
3454 alltraps:
3455   
3456   pushl %ds
3457   pushl %es
3458   pushl %fs
3459   pushl %gs
3460   pushal
3461 
3462   
3463   movw $(SEG_KDATA<<3), %ax
3464   movw %ax, %ds
3465   movw %ax, %es
3466 
3467   
3468   pushl %esp
3469   call trap
3470   addl $4, %esp
3471 
3472   
3473 .globl trapret
3474 trapret:
3475   popal
3476   popl %gs
3477   popl %fs
3478   popl %es
3479   popl %ds
3480   addl $0x8, %esp  
3481   iret
3482 
3483 
3484 
3485 
3486 
3487 
3488 
3489 
3490 
3491 
3492 
3493 
3494 
3495 
3496 
3497 
3498 
3499 
3500 #include "types.h"
3501 #include "defs.h"
3502 #include "param.h"
3503 #include "memlayout.h"
3504 #include "mmu.h"
3505 #include "proc.h"
3506 #include "x86.h"
3507 #include "traps.h"
3508 #include "spinlock.h"
3509 #include "i8254.h"
3510 
3511 
3512 struct gatedesc idt[256];
3513 extern uint vectors[];  
3514 struct spinlock tickslock;
3515 uint ticks;
3516 
3517 void
3518 tvinit(void)
3519 {
3520   int i;
3521 
3522   for(i = 0; i < 256; i++)
3523     SETGATE(idt[i], 0, SEG_KCODE<<3, vectors[i], 0);
3524   SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER);
3525 
3526   initlock(&tickslock, "time");
3527 }
3528 
3529 void
3530 idtinit(void)
3531 {
3532   lidt(idt, sizeof(idt));
3533 }
3534 
3535 
3536 
3537 
3538 
3539 
3540 
3541 
3542 
3543 
3544 
3545 
3546 
3547 
3548 
3549 
3550 void
3551 trap(struct trapframe *tf)
3552 {
3553   if(tf->trapno == T_SYSCALL){
3554     if(myproc()->killed)
3555       exit();
3556     myproc()->tf = tf;
3557     syscall();
3558     if(myproc()->killed)
3559       exit();
3560     return;
3561   }
3562 
3563   switch(tf->trapno){
3564   case T_IRQ0 + IRQ_TIMER:
3565     if(cpuid() == 0){
3566       acquire(&tickslock);
3567       ticks++;
3568       wakeup(&ticks);
3569       release(&tickslock);
3570     }
3571     lapiceoi();
3572     break;
3573   case T_IRQ0 + IRQ_IDE:
3574     ideintr();
3575     lapiceoi();
3576     break;
3577   case T_IRQ0 + IRQ_IDE+1:
3578     
3579     break;
3580   case T_IRQ0 + IRQ_KBD:
3581     kbdintr();
3582     lapiceoi();
3583     break;
3584   case T_IRQ0 + IRQ_COM1:
3585     uartintr();
3586     lapiceoi();
3587     break;
3588   case T_IRQ0 + 0xB:
3589     i8254_intr();
3590     lapiceoi();
3591     break;
3592   case T_IRQ0 + IRQ_SPURIOUS:
3593     cprintf("cpu%d: spurious interrupt at %x:%x\n",
3594             cpuid(), tf->cs, tf->eip);
3595     lapiceoi();
3596     break;
3597 
3598 
3599 
3600   default:
3601     if(myproc() == 0 || (tf->cs&3) == 0){
3602       
3603       cprintf("unexpected trap %d from cpu %d eip %x (cr2=0x%x)\n",
3604               tf->trapno, cpuid(), tf->eip, rcr2());
3605       panic("trap");
3606     }
3607     
3608     cprintf("pid %d %s: trap %d err %d on cpu %d "
3609             "eip 0x%x addr 0x%x--kill proc\n",
3610             myproc()->pid, myproc()->name, tf->trapno,
3611             tf->err, cpuid(), tf->eip, rcr2());
3612     myproc()->killed = 1;
3613   }
3614 
3615   
3616   
3617   
3618   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
3619     exit();
3620 
3621   
3622   
3623   if(myproc() && myproc()->state == RUNNING &&
3624      tf->trapno == T_IRQ0+IRQ_TIMER)
3625     yield();
3626 
3627   
3628   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
3629     exit();
3630 }
3631 
3632 
3633 
3634 
3635 
3636 
3637 
3638 
3639 
3640 
3641 
3642 
3643 
3644 
3645 
3646 
3647 
3648 
3649 
3650 
3651 #define SYS_fork    1
3652 #define SYS_exit    2
3653 #define SYS_wait    3
3654 #define SYS_pipe    4
3655 #define SYS_read    5
3656 #define SYS_kill    6
3657 #define SYS_exec    7
3658 #define SYS_fstat   8
3659 #define SYS_chdir   9
3660 #define SYS_dup    10
3661 #define SYS_getpid 11
3662 #define SYS_sbrk   12
3663 #define SYS_sleep  13
3664 #define SYS_uptime 14
3665 #define SYS_open   15
3666 #define SYS_write  16
3667 #define SYS_mknod  17
3668 #define SYS_unlink 18
3669 #define SYS_link   19
3670 #define SYS_mkdir  20
3671 #define SYS_close  21
3672 #define SYS_exit2  22
3673 #define SYS_wait2  23
3674 
3675 
3676 
3677 
3678 
3679 
3680 
3681 
3682 
3683 
3684 
3685 
3686 
3687 
3688 
3689 
3690 
3691 
3692 
3693 
3694 
3695 
3696 
3697 
3698 
3699 
3700 #include "types.h"
3701 #include "defs.h"
3702 #include "param.h"
3703 #include "memlayout.h"
3704 #include "mmu.h"
3705 #include "proc.h"
3706 #include "x86.h"
3707 #include "syscall.h"
3708 
3709 
3710 
3711 
3712 
3713 
3714 
3715 
3716 int
3717 fetchint(uint addr, int *ip)
3718 {
3719   struct proc *curproc = myproc();
3720 
3721   if(addr >= curproc->sz || addr+4 > curproc->sz)
3722     return -1;
3723   *ip = *(int*)(addr);
3724   return 0;
3725 }
3726 
3727 
3728 
3729 
3730 int
3731 fetchstr(uint addr, char **pp)
3732 {
3733   char *s, *ep;
3734   struct proc *curproc = myproc();
3735 
3736   if(addr >= curproc->sz)
3737     return -1;
3738   *pp = (char*)addr;
3739   ep = (char*)curproc->sz;
3740   for(s = *pp; s < ep; s++){
3741     if(*s == 0)
3742       return s - *pp;
3743   }
3744   return -1;
3745 }
3746 
3747 
3748 
3749 
3750 
3751 int
3752 argint(int n, int *ip)
3753 {
3754   return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
3755 }
3756 
3757 
3758 
3759 
3760 int
3761 argptr(int n, char **pp, int size)
3762 {
3763   int i;
3764   struct proc *curproc = myproc();
3765 
3766   if(argint(n, &i) < 0)
3767     return -1;
3768   if(size < 0 || (uint)i >= curproc->sz || (uint)i+size > curproc->sz)
3769     return -1;
3770   *pp = (char*)i;
3771   return 0;
3772 }
3773 
3774 
3775 
3776 
3777 
3778 int
3779 argstr(int n, char **pp)
3780 {
3781   int addr;
3782   if(argint(n, &addr) < 0)
3783     return -1;
3784   return fetchstr(addr, pp);
3785 }
3786 
3787 
3788 
3789 
3790 
3791 
3792 
3793 
3794 
3795 
3796 
3797 
3798 
3799 
3800 extern int sys_chdir(void);
3801 extern int sys_close(void);
3802 extern int sys_dup(void);
3803 extern int sys_exec(void);
3804 extern int sys_exit(void);
3805 extern int sys_fork(void);
3806 extern int sys_fstat(void);
3807 extern int sys_getpid(void);
3808 extern int sys_kill(void);
3809 extern int sys_link(void);
3810 extern int sys_mkdir(void);
3811 extern int sys_mknod(void);
3812 extern int sys_open(void);
3813 extern int sys_pipe(void);
3814 extern int sys_read(void);
3815 extern int sys_sbrk(void);
3816 extern int sys_sleep(void);
3817 extern int sys_unlink(void);
3818 extern int sys_wait(void);
3819 extern int sys_write(void);
3820 extern int sys_uptime(void);
3821 extern int sys_exit2(void);
3822 extern int sys_wait2(void);
3823 
3824 
3825 
3826 static int (*syscalls[])(void) = {
3827 [SYS_fork]    sys_fork,
3828 [SYS_exit]    sys_exit,
3829 [SYS_wait]    sys_wait,
3830 [SYS_pipe]    sys_pipe,
3831 [SYS_read]    sys_read,
3832 [SYS_kill]    sys_kill,
3833 [SYS_exec]    sys_exec,
3834 [SYS_fstat]   sys_fstat,
3835 [SYS_chdir]   sys_chdir,
3836 [SYS_dup]     sys_dup,
3837 [SYS_getpid]  sys_getpid,
3838 [SYS_sbrk]    sys_sbrk,
3839 [SYS_sleep]   sys_sleep,
3840 [SYS_uptime]  sys_uptime,
3841 [SYS_open]    sys_open,
3842 [SYS_write]   sys_write,
3843 [SYS_mknod]   sys_mknod,
3844 [SYS_unlink]  sys_unlink,
3845 [SYS_link]    sys_link,
3846 [SYS_mkdir]   sys_mkdir,
3847 [SYS_close]   sys_close,
3848 [SYS_exit2]   sys_exit2,
3849 [SYS_wait2]   sys_wait2,
3850 };
3851 
3852 void
3853 syscall(void)
3854 {
3855   int num;
3856   struct proc *curproc = myproc();
3857 
3858   num = curproc->tf->eax;
3859   if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
3860     curproc->tf->eax = syscalls[num]();
3861   } else {
3862     cprintf("%d %s: unknown sys call %d\n",
3863             curproc->pid, curproc->name, num);
3864     curproc->tf->eax = -1;
3865   }
3866 }
3867 
3868 
3869 
3870 
3871 
3872 
3873 
3874 
3875 
3876 
3877 
3878 
3879 
3880 
3881 
3882 
3883 
3884 
3885 
3886 
3887 
3888 
3889 
3890 
3891 
3892 
3893 
3894 
3895 
3896 
3897 
3898 
3899 
3900 #include "types.h"
3901 #include "x86.h"
3902 #include "defs.h"
3903 #include "date.h"
3904 #include "param.h"
3905 #include "memlayout.h"
3906 #include "mmu.h"
3907 #include "proc.h"
3908 #include "spinlock.h"
3909 #include "debug.h"
3910 
3911 int
3912 sys_fork(void)
3913 {
3914   return fork();
3915 }
3916 
3917 int
3918 sys_exit(void)
3919 {
3920   exit();
3921   return 0;  
3922 }
3923 
3924 int
3925 sys_exit2(void)
3926 {
3927   int status;
3928 
3929   
3930   
3931   if (argint(0, &status) < 0)
3932 	  return -1;
3933 
3934   exit2(status);
3935   
3936   return status; 
3937 }
3938 
3939 int
3940 sys_wait(void)
3941 {
3942   return wait();
3943 }
3944 
3945 
3946 
3947 
3948 
3949 
3950 
3951 
3952 
3953 
3954 int
3955 sys_wait2(void)
3956 {
3957 
3958   int status;
3959   
3960   if(argptr(0, (char **)&status, sizeof(int)) < 0)
3961     return -1;
3962 
3963   
3964   return wait2(&status);
3965 
3966 }
3967 
3968 
3969 
3970 
3971 
3972 int
3973 sys_kill(void)
3974 {
3975   int pid;
3976 
3977   if(argint(0, &pid) < 0)
3978     return -1;
3979   return kill(pid);
3980 }
3981 
3982 int
3983 sys_getpid(void)
3984 {
3985   return myproc()->pid;
3986 }
3987 
3988 
3989 
3990 
3991 
3992 
3993 
3994 
3995 
3996 
3997 
3998 
3999 
4000 int
4001 sys_sbrk(void)
4002 {
4003   int addr;
4004   int n;
4005 
4006   if(argint(0, &n) < 0)
4007     return -1;
4008   addr = myproc()->sz;
4009   if(growproc(n) < 0)
4010     return -1;
4011   return addr;
4012 }
4013 
4014 int
4015 sys_sleep(void)
4016 {
4017   int n;
4018   uint ticks0;
4019 
4020   if(argint(0, &n) < 0)
4021     return -1;
4022   acquire(&tickslock);
4023   ticks0 = ticks;
4024   while(ticks - ticks0 < n){
4025     if(myproc()->killed){
4026       release(&tickslock);
4027       return -1;
4028     }
4029     sleep(&ticks, &tickslock);
4030   }
4031   release(&tickslock);
4032   return 0;
4033 }
4034 
4035 
4036 
4037 int
4038 sys_uptime(void)
4039 {
4040   uint xticks;
4041 
4042   acquire(&tickslock);
4043   xticks = ticks;
4044   release(&tickslock);
4045   return xticks;
4046 }
4047 
4048 
4049 
4050 struct buf {
4051   int flags;
4052   uint dev;
4053   uint blockno;
4054   struct sleeplock lock;
4055   uint refcnt;
4056   struct buf *prev; 
4057   struct buf *next;
4058   struct buf *qnext; 
4059   uchar data[BSIZE];
4060 };
4061 #define B_VALID 0x2  
4062 #define B_DIRTY 0x4  
4063 
4064 
4065 
4066 
4067 
4068 
4069 
4070 
4071 
4072 
4073 
4074 
4075 
4076 
4077 
4078 
4079 
4080 
4081 
4082 
4083 
4084 
4085 
4086 
4087 
4088 
4089 
4090 
4091 
4092 
4093 
4094 
4095 
4096 
4097 
4098 
4099 
4100 
4101 struct sleeplock {
4102   uint locked;       
4103   struct spinlock lk; 
4104 
4105   
4106   char *name;        
4107   int pid;           
4108 };
4109 
4110 
4111 
4112 
4113 
4114 
4115 
4116 
4117 
4118 
4119 
4120 
4121 
4122 
4123 
4124 
4125 
4126 
4127 
4128 
4129 
4130 
4131 
4132 
4133 
4134 
4135 
4136 
4137 
4138 
4139 
4140 
4141 
4142 
4143 
4144 
4145 
4146 
4147 
4148 
4149 
4150 #define O_RDONLY  0x000
4151 #define O_WRONLY  0x001
4152 #define O_RDWR    0x002
4153 #define O_CREATE  0x200
4154 
4155 
4156 
4157 
4158 
4159 
4160 
4161 
4162 
4163 
4164 
4165 
4166 
4167 
4168 
4169 
4170 
4171 
4172 
4173 
4174 
4175 
4176 
4177 
4178 
4179 
4180 
4181 
4182 
4183 
4184 
4185 
4186 
4187 
4188 
4189 
4190 
4191 
4192 
4193 
4194 
4195 
4196 
4197 
4198 
4199 
4200 #define T_DIR  1   
4201 #define T_FILE 2   
4202 #define T_DEV  3   
4203 
4204 struct stat {
4205   short type;  
4206   int dev;     
4207   uint ino;    
4208   short nlink; 
4209   uint size;   
4210 };
4211 
4212 
4213 
4214 
4215 
4216 
4217 
4218 
4219 
4220 
4221 
4222 
4223 
4224 
4225 
4226 
4227 
4228 
4229 
4230 
4231 
4232 
4233 
4234 
4235 
4236 
4237 
4238 
4239 
4240 
4241 
4242 
4243 
4244 
4245 
4246 
4247 
4248 
4249 
4250 
4251 
4252 
4253 
4254 #define ROOTINO 1  
4255 #define BSIZE 512  
4256 
4257 
4258 
4259 
4260 
4261 
4262 
4263 struct superblock {
4264   uint size;         
4265   uint nblocks;      
4266   uint ninodes;      
4267   uint nlog;         
4268   uint logstart;     
4269   uint inodestart;   
4270   uint bmapstart;    
4271 };
4272 
4273 #define NDIRECT 12
4274 #define NINDIRECT (BSIZE / sizeof(uint))
4275 #define MAXFILE (NDIRECT + NINDIRECT)
4276 
4277 
4278 struct dinode {
4279   short type;           
4280   short major;          
4281   short minor;          
4282   short nlink;          
4283   uint size;            
4284   uint addrs[NDIRECT+1];   
4285 };
4286 
4287 
4288 
4289 
4290 
4291 
4292 
4293 
4294 
4295 
4296 
4297 
4298 
4299 
4300 
4301 #define IPB           (BSIZE / sizeof(struct dinode))
4302 
4303 
4304 #define IBLOCK(i, sb)     ((i) / IPB + sb.inodestart)
4305 
4306 
4307 #define BPB           (BSIZE*8)
4308 
4309 
4310 #define BBLOCK(b, sb) (b/BPB + sb.bmapstart)
4311 
4312 
4313 #define DIRSIZ 14
4314 
4315 struct dirent {
4316   ushort inum;
4317   char name[DIRSIZ];
4318 };
4319 
4320 
4321 
4322 
4323 
4324 
4325 
4326 
4327 
4328 
4329 
4330 
4331 
4332 
4333 
4334 
4335 
4336 
4337 
4338 
4339 
4340 
4341 
4342 
4343 
4344 
4345 
4346 
4347 
4348 
4349 
4350 struct file {
4351   enum { FD_NONE, FD_PIPE, FD_INODE } type;
4352   int ref; 
4353   char readable;
4354   char writable;
4355   struct pipe *pipe;
4356   struct inode *ip;
4357   uint off;
4358 };
4359 
4360 
4361 
4362 struct inode {
4363   uint dev;           
4364   uint inum;          
4365   int ref;            
4366   struct sleeplock lock; 
4367   int valid;          
4368 
4369   short type;         
4370   short major;
4371   short minor;
4372   short nlink;
4373   uint size;
4374   uint addrs[NDIRECT+1];
4375 };
4376 
4377 
4378 
4379 struct devsw {
4380   int (*read)(struct inode*, char*, int);
4381   int (*write)(struct inode*, char*, int);
4382 };
4383 
4384 extern struct devsw devsw[];
4385 
4386 #define CONSOLE 1
4387 
4388 
4389 
4390 
4391 
4392 
4393 
4394 
4395 
4396 
4397 
4398 
4399 
4400 
4401 
4402 #include "types.h"
4403 #include "defs.h"
4404 #include "param.h"
4405 #include "memlayout.h"
4406 #include "mmu.h"
4407 #include "proc.h"
4408 #include "x86.h"
4409 #include "traps.h"
4410 #include "spinlock.h"
4411 #include "sleeplock.h"
4412 #include "fs.h"
4413 #include "buf.h"
4414 
4415 #define SECTOR_SIZE   512
4416 #define IDE_BSY       0x80
4417 #define IDE_DRDY      0x40
4418 #define IDE_DF        0x20
4419 #define IDE_ERR       0x01
4420 
4421 #define IDE_CMD_READ  0x20
4422 #define IDE_CMD_WRITE 0x30
4423 #define IDE_CMD_RDMUL 0xc4
4424 #define IDE_CMD_WRMUL 0xc5
4425 
4426 #define IDE_DEBUG     1
4427 
4428 
4429 
4430 
4431 
4432 static struct spinlock idelock;
4433 static struct buf *idequeue;
4434 
4435 static int havedisk1;
4436 static void idestart(struct buf*);
4437 
4438 
4439 static int
4440 idewait(int checkerr)
4441 {
4442   int r;
4443 
4444   while(((r = inb(0x1f7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
4445     ;
4446   if(checkerr && (r & (IDE_DF|IDE_ERR)) != 0)
4447     return -1;
4448   return 0;
4449 }
4450 void
4451 ideinit(void)
4452 {
4453   int i;
4454 
4455   initlock(&idelock, "ide");
4456   ioapicenable(IRQ_IDE, ncpu - 1);
4457   idewait(0);
4458 
4459   
4460   outb(0x1f6, 0xe0 | (1<<4));
4461   for(i=0; i<1000; i++){
4462     if(inb(0x1f7) != 0){
4463       havedisk1 = 1;
4464       break;
4465     }
4466   }
4467 
4468   
4469   outb(0x1f6, 0xe0 | (0<<4));
4470 }
4471 
4472 
4473 static void
4474 idestart(struct buf *b)
4475 {
4476   if(b == 0)
4477     panic("idestart");
4478   if(b->blockno >= FSSIZE)
4479     panic("incorrect blockno");
4480   int sector_per_block =  BSIZE/SECTOR_SIZE;
4481   int sector = b->blockno * sector_per_block;
4482   int read_cmd = (sector_per_block == 1) ? IDE_CMD_READ :  IDE_CMD_RDMUL;
4483   int write_cmd = (sector_per_block == 1) ? IDE_CMD_WRITE : IDE_CMD_WRMUL;
4484 
4485   if (sector_per_block > 7) panic("idestart");
4486 
4487   idewait(0);
4488   outb(0x3f6, 0);  
4489   outb(0x1f2, sector_per_block);  
4490   outb(0x1f3, sector & 0xff);
4491   outb(0x1f4, (sector >> 8) & 0xff);
4492   outb(0x1f5, (sector >> 16) & 0xff);
4493   outb(0x1f6, 0xe0 | ((b->dev&1)<<4) | ((sector>>24)&0x0f));
4494   if(b->flags & B_DIRTY){
4495     outb(0x1f7, write_cmd);
4496     outsl(0x1f0, b->data, BSIZE/4);
4497   } else {
4498     outb(0x1f7, read_cmd);
4499   }
4500 }
4501 
4502 
4503 void
4504 ideintr(void)
4505 {
4506   struct buf *b;
4507 
4508   
4509   acquire(&idelock);
4510 
4511   if((b = idequeue) == 0){
4512     release(&idelock);
4513     return;
4514   }
4515   idequeue = b->qnext;
4516 
4517   
4518   if(!(b->flags & B_DIRTY) && idewait(1) >= 0)
4519     insl(0x1f0, b->data, BSIZE/4);
4520 
4521   
4522   b->flags |= B_VALID;
4523   b->flags &= ~B_DIRTY;
4524   wakeup(b);
4525 
4526   
4527   if(idequeue != 0)
4528     idestart(idequeue);
4529 
4530   release(&idelock);
4531 }
4532 
4533 
4534 
4535 
4536 
4537 
4538 
4539 
4540 
4541 
4542 
4543 
4544 
4545 
4546 
4547 
4548 
4549 
4550 
4551 
4552 
4553 void
4554 iderw(struct buf *b)
4555 {
4556   struct buf **pp;
4557 #if IDE_DEBUG
4558   cprintf("b->dev: %x havedisk1: %x\n",b->dev,havedisk1);
4559 #endif
4560   if(!holdingsleep(&b->lock))
4561     panic("iderw: buf not locked");
4562   if((b->flags & (B_VALID|B_DIRTY)) == B_VALID)
4563     panic("iderw: nothing to do");
4564   if(b->dev != 0 && !havedisk1)
4565     panic("iderw: ide disk 1 not present");
4566 
4567   acquire(&idelock);  
4568 
4569   
4570   b->qnext = 0;
4571   for(pp=&idequeue; *pp; pp=&(*pp)->qnext)  
4572     ;
4573   *pp = b;
4574 
4575   
4576   if(idequeue == b)
4577     idestart(b);
4578 
4579   
4580   while((b->flags & (B_VALID|B_DIRTY)) != B_VALID){
4581     sleep(b, &idelock);
4582   }
4583 
4584 
4585   release(&idelock);
4586 }
4587 
4588 
4589 
4590 
4591 
4592 
4593 
4594 
4595 
4596 
4597 
4598 
4599 
4600 
4601 
4602 
4603 
4604 
4605 
4606 
4607 
4608 
4609 
4610 
4611 
4612 
4613 
4614 
4615 
4616 
4617 
4618 
4619 
4620 #include "types.h"
4621 #include "defs.h"
4622 #include "param.h"
4623 #include "spinlock.h"
4624 #include "sleeplock.h"
4625 #include "fs.h"
4626 #include "buf.h"
4627 
4628 struct {
4629   struct spinlock lock;
4630   struct buf buf[NBUF];
4631 
4632   
4633   
4634   struct buf head;
4635 } bcache;
4636 
4637 void
4638 binit(void)
4639 {
4640   struct buf *b;
4641 
4642   initlock(&bcache.lock, "bcache");
4643 
4644 
4645 
4646 
4647 
4648 
4649 
4650   
4651   bcache.head.prev = &bcache.head;
4652   bcache.head.next = &bcache.head;
4653   for(b = bcache.buf; b < bcache.buf+NBUF; b++){
4654     b->next = bcache.head.next;
4655     b->prev = &bcache.head;
4656     initsleeplock(&b->lock, "buffer");
4657     bcache.head.next->prev = b;
4658     bcache.head.next = b;
4659   }
4660 }
4661 
4662 
4663 
4664 
4665 static struct buf*
4666 bget(uint dev, uint blockno)
4667 {
4668   struct buf *b;
4669 
4670   acquire(&bcache.lock);
4671 
4672   
4673   for(b = bcache.head.next; b != &bcache.head; b = b->next){
4674     if(b->dev == dev && b->blockno == blockno){
4675       b->refcnt++;
4676       release(&bcache.lock);
4677       acquiresleep(&b->lock);
4678       return b;
4679     }
4680   }
4681 
4682   
4683   
4684   
4685   for(b = bcache.head.prev; b != &bcache.head; b = b->prev){
4686     if(b->refcnt == 0 && (b->flags & B_DIRTY) == 0) {
4687       b->dev = dev;
4688       b->blockno = blockno;
4689       b->flags = 0;
4690       b->refcnt = 1;
4691       release(&bcache.lock);
4692       acquiresleep(&b->lock);
4693       return b;
4694     }
4695   }
4696   panic("bget: no buffers");
4697 }
4698 
4699 
4700 
4701 struct buf*
4702 bread(uint dev, uint blockno)
4703 {
4704   struct buf *b;
4705 
4706   b = bget(dev, blockno);
4707   if((b->flags & B_VALID) == 0) {
4708     iderw(b);
4709   }
4710   return b;
4711 }
4712 
4713 
4714 void
4715 bwrite(struct buf *b)
4716 {
4717   if(!holdingsleep(&b->lock))
4718     panic("bwrite");
4719   b->flags |= B_DIRTY;
4720   iderw(b);
4721 }
4722 
4723 
4724 
4725 void
4726 brelse(struct buf *b)
4727 {
4728   if(!holdingsleep(&b->lock))
4729     panic("brelse");
4730 
4731   releasesleep(&b->lock);
4732 
4733   acquire(&bcache.lock);
4734   b->refcnt--;
4735   if (b->refcnt == 0) {
4736     
4737     b->next->prev = b->prev;
4738     b->prev->next = b->next;
4739     b->next = bcache.head.next;
4740     b->prev = &bcache.head;
4741     bcache.head.next->prev = b;
4742     bcache.head.next = b;
4743   }
4744 
4745   release(&bcache.lock);
4746 }
4747 
4748 
4749 
4750 
4751 
4752 
4753 
4754 
4755 
4756 
4757 
4758 
4759 
4760 
4761 
4762 
4763 
4764 
4765 
4766 
4767 
4768 
4769 
4770 
4771 
4772 
4773 
4774 
4775 
4776 
4777 
4778 
4779 
4780 
4781 
4782 
4783 
4784 
4785 
4786 
4787 
4788 
4789 
4790 
4791 
4792 
4793 
4794 
4795 
4796 
4797 
4798 
4799 
4800 
4801 
4802 #include "types.h"
4803 #include "defs.h"
4804 #include "param.h"
4805 #include "x86.h"
4806 #include "memlayout.h"
4807 #include "mmu.h"
4808 #include "proc.h"
4809 #include "spinlock.h"
4810 #include "sleeplock.h"
4811 
4812 void
4813 initsleeplock(struct sleeplock *lk, char *name)
4814 {
4815   initlock(&lk->lk, "sleep lock");
4816   lk->name = name;
4817   lk->locked = 0;
4818   lk->pid = 0;
4819 }
4820 
4821 void
4822 acquiresleep(struct sleeplock *lk)
4823 {
4824   acquire(&lk->lk);
4825   while (lk->locked) {
4826     sleep(lk, &lk->lk);
4827   }
4828   lk->locked = 1;
4829   lk->pid = myproc()->pid;
4830   release(&lk->lk);
4831 }
4832 
4833 void
4834 releasesleep(struct sleeplock *lk)
4835 {
4836   acquire(&lk->lk);
4837   lk->locked = 0;
4838   lk->pid = 0;
4839   wakeup(lk);
4840   release(&lk->lk);
4841 }
4842 
4843 
4844 
4845 
4846 
4847 
4848 
4849 
4850 int
4851 holdingsleep(struct sleeplock *lk)
4852 {
4853   int r;
4854 
4855   acquire(&lk->lk);
4856   r = lk->locked;
4857   release(&lk->lk);
4858   return r;
4859 }
4860 
4861 
4862 
4863 
4864 
4865 
4866 
4867 
4868 
4869 
4870 
4871 
4872 
4873 
4874 
4875 
4876 
4877 
4878 
4879 
4880 
4881 
4882 
4883 
4884 
4885 
4886 
4887 
4888 
4889 
4890 
4891 
4892 
4893 
4894 
4895 
4896 
4897 
4898 
4899 
4900 #include "types.h"
4901 #include "defs.h"
4902 #include "param.h"
4903 #include "spinlock.h"
4904 #include "sleeplock.h"
4905 #include "fs.h"
4906 #include "buf.h"
4907 
4908 
4909 
4910 
4911 
4912 
4913 
4914 
4915 
4916 
4917 
4918 
4919 
4920 
4921 
4922 
4923 
4924 
4925 
4926 
4927 
4928 
4929 
4930 
4931 
4932 
4933 struct logheader {
4934   int n;
4935   int block[LOGSIZE];
4936 };
4937 
4938 struct log {
4939   struct spinlock lock;
4940   int start;
4941   int size;
4942   int outstanding; 
4943   int committing;  
4944   int dev;
4945   struct logheader lh;
4946 };
4947 
4948 
4949 
4950 struct log log;
4951 
4952 static void recover_from_log(void);
4953 static void commit();
4954 
4955 void
4956 initlog(int dev)
4957 {
4958   if (sizeof(struct logheader) >= BSIZE)
4959     panic("initlog: too big logheader");
4960 
4961   struct superblock sb;
4962   initlock(&log.lock, "log");
4963   readsb(dev, &sb);
4964   log.start = sb.logstart;
4965   log.size = sb.nlog;
4966   log.dev = dev;
4967   recover_from_log();
4968 }
4969 
4970 
4971 static void
4972 install_trans(void)
4973 {
4974   int tail;
4975 
4976   for (tail = 0; tail < log.lh.n; tail++) {
4977     struct buf *lbuf = bread(log.dev, log.start+tail+1); 
4978     struct buf *dbuf = bread(log.dev, log.lh.block[tail]); 
4979     memmove(dbuf->data, lbuf->data, BSIZE);  
4980     bwrite(dbuf);  
4981     brelse(lbuf);
4982     brelse(dbuf);
4983   }
4984 }
4985 
4986 
4987 static void
4988 read_head(void)
4989 {
4990   struct buf *buf = bread(log.dev, log.start);
4991   struct logheader *lh = (struct logheader *) (buf->data);
4992   int i;
4993   log.lh.n = lh->n;
4994   for (i = 0; i < log.lh.n; i++) {
4995     log.lh.block[i] = lh->block[i];
4996   }
4997   brelse(buf);
4998 }
4999 
5000 
5001 
5002 
5003 static void
5004 write_head(void)
5005 {
5006   struct buf *buf = bread(log.dev, log.start);
5007   struct logheader *hb = (struct logheader *) (buf->data);
5008   int i;
5009   hb->n = log.lh.n;
5010   for (i = 0; i < log.lh.n; i++) {
5011     hb->block[i] = log.lh.block[i];
5012   }
5013   bwrite(buf);
5014   brelse(buf);
5015 }
5016 
5017 static void
5018 recover_from_log(void)
5019 {
5020   read_head();
5021   install_trans(); 
5022   log.lh.n = 0;
5023   write_head(); 
5024 }
5025 
5026 
5027 void
5028 begin_op(void)
5029 {
5030   acquire(&log.lock);
5031   while(1){
5032     if(log.committing){
5033       sleep(&log, &log.lock);
5034     } else if(log.lh.n + (log.outstanding+1)*MAXOPBLOCKS > LOGSIZE){
5035       
5036       sleep(&log, &log.lock);
5037     } else {
5038       log.outstanding += 1;
5039       release(&log.lock);
5040       break;
5041     }
5042   }
5043 }
5044 
5045 
5046 
5047 
5048 
5049 
5050 
5051 
5052 void
5053 end_op(void)
5054 {
5055   int do_commit = 0;
5056 
5057   acquire(&log.lock);
5058   log.outstanding -= 1;
5059   if(log.committing)
5060     panic("log.committing");
5061   if(log.outstanding == 0){
5062     do_commit = 1;
5063     log.committing = 1;
5064   } else {
5065     
5066     
5067     
5068     wakeup(&log);
5069   }
5070   release(&log.lock);
5071 
5072   if(do_commit){
5073     
5074     
5075     commit();
5076     acquire(&log.lock);
5077     log.committing = 0;
5078     wakeup(&log);
5079     release(&log.lock);
5080   }
5081 }
5082 
5083 
5084 static void
5085 write_log(void)
5086 {
5087   int tail;
5088 
5089   for (tail = 0; tail < log.lh.n; tail++) {
5090     struct buf *to = bread(log.dev, log.start+tail+1); 
5091     struct buf *from = bread(log.dev, log.lh.block[tail]); 
5092     memmove(to->data, from->data, BSIZE);
5093     bwrite(to);  
5094     brelse(from);
5095     brelse(to);
5096   }
5097 }
5098 
5099 
5100 static void
5101 commit()
5102 {
5103   if (log.lh.n > 0) {
5104     write_log();     
5105     write_head();    
5106     install_trans(); 
5107     log.lh.n = 0;
5108     write_head();    
5109   }
5110 }
5111 
5112 
5113 
5114 
5115 
5116 
5117 
5118 
5119 
5120 
5121 void
5122 log_write(struct buf *b)
5123 {
5124   int i;
5125 
5126   if (log.lh.n >= LOGSIZE || log.lh.n >= log.size - 1)
5127     panic("too big a transaction");
5128   if (log.outstanding < 1)
5129     panic("log_write outside of trans");
5130 
5131   acquire(&log.lock);
5132   for (i = 0; i < log.lh.n; i++) {
5133     if (log.lh.block[i] == b->blockno)   
5134       break;
5135   }
5136   log.lh.block[i] = b->blockno;
5137   if (i == log.lh.n)
5138     log.lh.n++;
5139   b->flags |= B_DIRTY; 
5140   release(&log.lock);
5141 }
5142 
5143 
5144 
5145 
5146 
5147 
5148 
5149 
5150 
5151 
5152 
5153 
5154 
5155 
5156 
5157 
5158 
5159 
5160 
5161 #include "types.h"
5162 #include "defs.h"
5163 #include "param.h"
5164 #include "stat.h"
5165 #include "mmu.h"
5166 #include "proc.h"
5167 #include "spinlock.h"
5168 #include "sleeplock.h"
5169 #include "fs.h"
5170 #include "buf.h"
5171 #include "file.h"
5172 
5173 #define min(a, b) ((a) < (b) ? (a) : (b))
5174 static void itrunc(struct inode*);
5175 
5176 
5177 struct superblock sb;
5178 
5179 
5180 void
5181 readsb(int dev, struct superblock *sb)
5182 {
5183   struct buf *bp;
5184 
5185   bp = bread(dev, 1);
5186   memmove(sb, bp->data, sizeof(*sb));
5187   brelse(bp);
5188 }
5189 
5190 
5191 
5192 
5193 
5194 
5195 
5196 
5197 
5198 
5199 
5200 
5201 static void
5202 bzero(int dev, int bno)
5203 {
5204   struct buf *bp;
5205 
5206   bp = bread(dev, bno);
5207   memset(bp->data, 0, BSIZE);
5208   log_write(bp);
5209   brelse(bp);
5210 }
5211 
5212 
5213 
5214 
5215 static uint
5216 balloc(uint dev)
5217 {
5218   int b, bi, m;
5219   struct buf *bp;
5220 
5221   bp = 0;
5222   for(b = 0; b < sb.size; b += BPB){
5223     bp = bread(dev, BBLOCK(b, sb));
5224     for(bi = 0; bi < BPB && b + bi < sb.size; bi++){
5225       m = 1 << (bi % 8);
5226       if((bp->data[bi/8] & m) == 0){  
5227         bp->data[bi/8] |= m;  
5228         log_write(bp);
5229         brelse(bp);
5230         bzero(dev, b + bi);
5231         return b + bi;
5232       }
5233     }
5234     brelse(bp);
5235   }
5236   panic("balloc: out of blocks");
5237 }
5238 
5239 
5240 
5241 
5242 
5243 
5244 
5245 
5246 
5247 
5248 
5249 
5250 
5251 static void
5252 bfree(int dev, uint b)
5253 {
5254   struct buf *bp;
5255   int bi, m;
5256 
5257   readsb(dev, &sb);
5258   bp = bread(dev, BBLOCK(b, sb));
5259   bi = b % BPB;
5260   m = 1 << (bi % 8);
5261   if((bp->data[bi/8] & m) == 0)
5262     panic("freeing free block");
5263   bp->data[bi/8] &= ~m;
5264   log_write(bp);
5265   brelse(bp);
5266 }
5267 
5268 
5269 
5270 
5271 
5272 
5273 
5274 
5275 
5276 
5277 
5278 
5279 
5280 
5281 
5282 
5283 
5284 
5285 
5286 
5287 
5288 
5289 
5290 
5291 
5292 
5293 
5294 
5295 
5296 
5297 
5298 
5299 
5300 
5301 
5302 
5303 
5304 
5305 
5306 
5307 
5308 
5309 
5310 
5311 
5312 
5313 
5314 
5315 
5316 
5317 
5318 
5319 
5320 
5321 
5322 
5323 
5324 
5325 
5326 
5327 
5328 
5329 
5330 
5331 
5332 
5333 
5334 
5335 
5336 
5337 struct {
5338   struct spinlock lock;
5339   struct inode inode[NINODE];
5340 } icache;
5341 
5342 void
5343 iinit(int dev)
5344 {
5345   int i = 0;
5346 
5347   initlock(&icache.lock, "icache");
5348   for(i = 0; i < NINODE; i++) {
5349     initsleeplock(&icache.inode[i].lock, "inode");
5350   }
5351 
5352   readsb(dev, &sb);
5353   cprintf("sb: size %d nblocks %d ninodes %d nlog %d logstart %d\
5354  inodestart %d bmap start %d\n", sb.size, sb.nblocks,
5355           sb.ninodes, sb.nlog, sb.logstart, sb.inodestart,
5356           sb.bmapstart);
5357 }
5358 
5359 static struct inode* iget(uint dev, uint inum);
5360 
5361 
5362 
5363 
5364 
5365 
5366 
5367 
5368 
5369 
5370 
5371 
5372 
5373 
5374 
5375 
5376 
5377 
5378 
5379 
5380 
5381 
5382 
5383 
5384 
5385 
5386 
5387 
5388 
5389 
5390 
5391 
5392 
5393 
5394 
5395 
5396 
5397 
5398 
5399 
5400 
5401 
5402 
5403 struct inode*
5404 ialloc(uint dev, short type)
5405 {
5406   int inum;
5407   struct buf *bp;
5408   struct dinode *dip;
5409 
5410   for(inum = 1; inum < sb.ninodes; inum++){
5411     bp = bread(dev, IBLOCK(inum, sb));
5412     dip = (struct dinode*)bp->data + inum%IPB;
5413     if(dip->type == 0){  
5414       memset(dip, 0, sizeof(*dip));
5415       dip->type = type;
5416       log_write(bp);   
5417       brelse(bp);
5418       return iget(dev, inum);
5419     }
5420     brelse(bp);
5421   }
5422   panic("ialloc: no inodes");
5423 }
5424 
5425 
5426 
5427 
5428 
5429 void
5430 iupdate(struct inode *ip)
5431 {
5432   struct buf *bp;
5433   struct dinode *dip;
5434 
5435   bp = bread(ip->dev, IBLOCK(ip->inum, sb));
5436   dip = (struct dinode*)bp->data + ip->inum%IPB;
5437   dip->type = ip->type;
5438   dip->major = ip->major;
5439   dip->minor = ip->minor;
5440   dip->nlink = ip->nlink;
5441   dip->size = ip->size;
5442   memmove(dip->addrs, ip->addrs, sizeof(ip->addrs));
5443   log_write(bp);
5444   brelse(bp);
5445 }
5446 
5447 
5448 
5449 
5450 
5451 
5452 
5453 static struct inode*
5454 iget(uint dev, uint inum)
5455 {
5456   struct inode *ip, *empty;
5457 
5458   acquire(&icache.lock);
5459 
5460   
5461   empty = 0;
5462   for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
5463     if(ip->ref > 0 && ip->dev == dev && ip->inum == inum){
5464       ip->ref++;
5465       release(&icache.lock);
5466       return ip;
5467     }
5468     if(empty == 0 && ip->ref == 0)    
5469       empty = ip;
5470   }
5471 
5472   
5473   if(empty == 0)
5474     panic("iget: no inodes");
5475 
5476   ip = empty;
5477   ip->dev = dev;
5478   ip->inum = inum;
5479   ip->ref = 1;
5480   ip->valid = 0;
5481   release(&icache.lock);
5482 
5483   return ip;
5484 }
5485 
5486 
5487 
5488 struct inode*
5489 idup(struct inode *ip)
5490 {
5491   acquire(&icache.lock);
5492   ip->ref++;
5493   release(&icache.lock);
5494   return ip;
5495 }
5496 
5497 
5498 
5499 
5500 
5501 
5502 void
5503 ilock(struct inode *ip)
5504 {
5505   struct buf *bp;
5506   struct dinode *dip;
5507 
5508   if(ip == 0 || ip->ref < 1)
5509     panic("ilock");
5510 
5511   acquiresleep(&ip->lock);
5512 
5513   if(ip->valid == 0){
5514     bp = bread(ip->dev, IBLOCK(ip->inum, sb));
5515     dip = (struct dinode*)bp->data + ip->inum%IPB;
5516     ip->type = dip->type;
5517     ip->major = dip->major;
5518     ip->minor = dip->minor;
5519     ip->nlink = dip->nlink;
5520     ip->size = dip->size;
5521     memmove(ip->addrs, dip->addrs, sizeof(ip->addrs));
5522     brelse(bp);
5523     ip->valid = 1;
5524     if(ip->type == 0)
5525       panic("ilock: no type");
5526   }
5527 }
5528 
5529 
5530 void
5531 iunlock(struct inode *ip)
5532 {
5533   if(ip == 0 || !holdingsleep(&ip->lock) || ip->ref < 1)
5534     panic("iunlock");
5535 
5536   releasesleep(&ip->lock);
5537 }
5538 
5539 
5540 
5541 
5542 
5543 
5544 
5545 
5546 
5547 
5548 
5549 
5550 
5551 
5552 
5553 
5554 
5555 
5556 
5557 void
5558 iput(struct inode *ip)
5559 {
5560   acquiresleep(&ip->lock);
5561   if(ip->valid && ip->nlink == 0){
5562     acquire(&icache.lock);
5563     int r = ip->ref;
5564     release(&icache.lock);
5565     if(r == 1){
5566       
5567       itrunc(ip);
5568       ip->type = 0;
5569       iupdate(ip);
5570       ip->valid = 0;
5571     }
5572   }
5573   releasesleep(&ip->lock);
5574 
5575   acquire(&icache.lock);
5576   ip->ref--;
5577   release(&icache.lock);
5578 }
5579 
5580 
5581 void
5582 iunlockput(struct inode *ip)
5583 {
5584   iunlock(ip);
5585   iput(ip);
5586 }
5587 
5588 
5589 
5590 
5591 
5592 
5593 
5594 
5595 
5596 
5597 
5598 
5599 
5600 
5601 
5602 
5603 
5604 
5605 
5606 
5607 
5608 
5609 static uint
5610 bmap(struct inode *ip, uint bn)
5611 {
5612   uint addr, *a;
5613   struct buf *bp;
5614 
5615   if(bn < NDIRECT){
5616     if((addr = ip->addrs[bn]) == 0)
5617       ip->addrs[bn] = addr = balloc(ip->dev);
5618     return addr;
5619   }
5620   bn -= NDIRECT;
5621 
5622   if(bn < NINDIRECT){
5623     
5624     if((addr = ip->addrs[NDIRECT]) == 0)
5625       ip->addrs[NDIRECT] = addr = balloc(ip->dev);
5626     bp = bread(ip->dev, addr);
5627     a = (uint*)bp->data;
5628     if((addr = a[bn]) == 0){
5629       a[bn] = addr = balloc(ip->dev);
5630       log_write(bp);
5631     }
5632     brelse(bp);
5633     return addr;
5634   }
5635 
5636   panic("bmap: out of range");
5637 }
5638 
5639 
5640 
5641 
5642 
5643 
5644 
5645 
5646 
5647 
5648 
5649 
5650 
5651 
5652 
5653 
5654 
5655 static void
5656 itrunc(struct inode *ip)
5657 {
5658   int i, j;
5659   struct buf *bp;
5660   uint *a;
5661 
5662   for(i = 0; i < NDIRECT; i++){
5663     if(ip->addrs[i]){
5664       bfree(ip->dev, ip->addrs[i]);
5665       ip->addrs[i] = 0;
5666     }
5667   }
5668 
5669   if(ip->addrs[NDIRECT]){
5670     bp = bread(ip->dev, ip->addrs[NDIRECT]);
5671     a = (uint*)bp->data;
5672     for(j = 0; j < NINDIRECT; j++){
5673       if(a[j])
5674         bfree(ip->dev, a[j]);
5675     }
5676     brelse(bp);
5677     bfree(ip->dev, ip->addrs[NDIRECT]);
5678     ip->addrs[NDIRECT] = 0;
5679   }
5680 
5681   ip->size = 0;
5682   iupdate(ip);
5683 }
5684 
5685 
5686 
5687 void
5688 stati(struct inode *ip, struct stat *st)
5689 {
5690   st->dev = ip->dev;
5691   st->ino = ip->inum;
5692   st->type = ip->type;
5693   st->nlink = ip->nlink;
5694   st->size = ip->size;
5695 }
5696 
5697 
5698 
5699 
5700 
5701 
5702 int
5703 readi(struct inode *ip, char *dst, uint off, uint n)
5704 {
5705   uint tot, m;
5706   struct buf *bp;
5707 
5708   if(ip->type == T_DEV){
5709     if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].read)
5710       return -1;
5711     return devsw[ip->major].read(ip, dst, n);
5712   }
5713 
5714   if(off > ip->size || off + n < off)
5715     return -1;
5716   if(off + n > ip->size)
5717     n = ip->size - off;
5718 
5719   for(tot=0; tot<n; tot+=m, off+=m, dst+=m){
5720     bp = bread(ip->dev, bmap(ip, off/BSIZE));
5721     m = min(n - tot, BSIZE - off%BSIZE);
5722     memmove(dst, bp->data + off%BSIZE, m);
5723     brelse(bp);
5724   }
5725   return n;
5726 }
5727 
5728 
5729 
5730 
5731 
5732 
5733 
5734 
5735 
5736 
5737 
5738 
5739 
5740 
5741 
5742 
5743 
5744 
5745 
5746 
5747 
5748 
5749 
5750 
5751 
5752 int
5753 writei(struct inode *ip, char *src, uint off, uint n)
5754 {
5755   uint tot, m;
5756   struct buf *bp;
5757 
5758   if(ip->type == T_DEV){
5759     if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].write)
5760       return -1;
5761     return devsw[ip->major].write(ip, src, n);
5762   }
5763 
5764   if(off > ip->size || off + n < off)
5765     return -1;
5766   if(off + n > MAXFILE*BSIZE)
5767     return -1;
5768 
5769   for(tot=0; tot<n; tot+=m, off+=m, src+=m){
5770     bp = bread(ip->dev, bmap(ip, off/BSIZE));
5771     m = min(n - tot, BSIZE - off%BSIZE);
5772     memmove(bp->data + off%BSIZE, src, m);
5773     log_write(bp);
5774     brelse(bp);
5775   }
5776 
5777   if(n > 0 && off > ip->size){
5778     ip->size = off;
5779     iupdate(ip);
5780   }
5781   return n;
5782 }
5783 
5784 
5785 
5786 
5787 
5788 
5789 
5790 
5791 
5792 
5793 
5794 
5795 
5796 
5797 
5798 
5799 
5800 
5801 
5802 int
5803 namecmp(const char *s, const char *t)
5804 {
5805   return strncmp(s, t, DIRSIZ);
5806 }
5807 
5808 
5809 
5810 struct inode*
5811 dirlookup(struct inode *dp, char *name, uint *poff)
5812 {
5813   uint off, inum;
5814   struct dirent de;
5815 
5816   if(dp->type != T_DIR)
5817     panic("dirlookup not DIR");
5818 
5819   for(off = 0; off < dp->size; off += sizeof(de)){
5820     if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
5821       panic("dirlookup read");
5822     if(de.inum == 0)
5823       continue;
5824     if(namecmp(name, de.name) == 0){
5825       
5826       if(poff)
5827         *poff = off;
5828       inum = de.inum;
5829       return iget(dp->dev, inum);
5830     }
5831   }
5832 
5833   return 0;
5834 }
5835 
5836 
5837 
5838 
5839 
5840 
5841 
5842 
5843 
5844 
5845 
5846 
5847 
5848 
5849 
5850 
5851 int
5852 dirlink(struct inode *dp, char *name, uint inum)
5853 {
5854   int off;
5855   struct dirent de;
5856   struct inode *ip;
5857 
5858   
5859   if((ip = dirlookup(dp, name, 0)) != 0){
5860     iput(ip);
5861     return -1;
5862   }
5863 
5864   
5865   for(off = 0; off < dp->size; off += sizeof(de)){
5866     if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
5867       panic("dirlink read");
5868     if(de.inum == 0)
5869       break;
5870   }
5871 
5872   strncpy(de.name, name, DIRSIZ);
5873   de.inum = inum;
5874   if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
5875     panic("dirlink");
5876 
5877   return 0;
5878 }
5879 
5880 
5881 
5882 
5883 
5884 
5885 
5886 
5887 
5888 
5889 
5890 
5891 
5892 
5893 
5894 
5895 
5896 
5897 
5898 
5899 
5900 
5901 
5902 
5903 
5904 
5905 
5906 
5907 
5908 
5909 
5910 
5911 
5912 
5913 
5914 static char*
5915 skipelem(char *path, char *name)
5916 {
5917   char *s;
5918   int len;
5919 
5920   while(*path == '/')
5921     path++;
5922   if(*path == 0)
5923     return 0;
5924   s = path;
5925   while(*path != '/' && *path != 0)
5926     path++;
5927   len = path - s;
5928   if(len >= DIRSIZ)
5929     memmove(name, s, DIRSIZ);
5930   else {
5931     memmove(name, s, len);
5932     name[len] = 0;
5933   }
5934   while(*path == '/')
5935     path++;
5936   return path;
5937 }
5938 
5939 
5940 
5941 
5942 
5943 
5944 
5945 
5946 
5947 
5948 
5949 
5950 
5951 
5952 
5953 
5954 static struct inode*
5955 namex(char *path, int nameiparent, char *name)
5956 {
5957   struct inode *ip, *next;
5958 
5959   if(*path == '/')
5960     ip = iget(ROOTDEV, ROOTINO);
5961   else
5962     ip = idup(myproc()->cwd);
5963 
5964   while((path = skipelem(path, name)) != 0){
5965     ilock(ip);
5966     if(ip->type != T_DIR){
5967       iunlockput(ip);
5968       return 0;
5969     }
5970     if(nameiparent && *path == '\0'){
5971       
5972       iunlock(ip);
5973       return ip;
5974     }
5975     if((next = dirlookup(ip, name, 0)) == 0){
5976       iunlockput(ip);
5977       return 0;
5978     }
5979     iunlockput(ip);
5980     ip = next;
5981   }
5982   if(nameiparent){
5983     iput(ip);
5984     return 0;
5985   }
5986   return ip;
5987 }
5988 
5989 struct inode*
5990 namei(char *path)
5991 {
5992   char name[DIRSIZ];
5993   return namex(path, 0, name);
5994 }
5995 
5996 
5997 
5998 
5999 
6000 struct inode*
6001 nameiparent(char *path, char *name)
6002 {
6003   return namex(path, 1, name);
6004 }
6005 
6006 
6007 
6008 
6009 
6010 
6011 
6012 
6013 
6014 
6015 
6016 
6017 
6018 
6019 
6020 
6021 
6022 
6023 
6024 
6025 
6026 
6027 
6028 
6029 
6030 
6031 
6032 
6033 
6034 
6035 
6036 
6037 
6038 
6039 
6040 
6041 
6042 
6043 
6044 
6045 
6046 
6047 
6048 
6049 
6050 
6051 
6052 
6053 
6054 #include "types.h"
6055 #include "defs.h"
6056 #include "param.h"
6057 #include "fs.h"
6058 #include "spinlock.h"
6059 #include "sleeplock.h"
6060 #include "file.h"
6061 
6062 struct devsw devsw[NDEV];
6063 struct {
6064   struct spinlock lock;
6065   struct file file[NFILE];
6066 } ftable;
6067 
6068 void
6069 fileinit(void)
6070 {
6071   initlock(&ftable.lock, "ftable");
6072 }
6073 
6074 
6075 struct file*
6076 filealloc(void)
6077 {
6078   struct file *f;
6079 
6080   acquire(&ftable.lock);
6081   for(f = ftable.file; f < ftable.file + NFILE; f++){
6082     if(f->ref == 0){
6083       f->ref = 1;
6084       release(&ftable.lock);
6085       return f;
6086     }
6087   }
6088   release(&ftable.lock);
6089   return 0;
6090 }
6091 
6092 
6093 
6094 
6095 
6096 
6097 
6098 
6099 
6100 
6101 struct file*
6102 filedup(struct file *f)
6103 {
6104   acquire(&ftable.lock);
6105   if(f->ref < 1)
6106     panic("filedup");
6107   f->ref++;
6108   release(&ftable.lock);
6109   return f;
6110 }
6111 
6112 
6113 void
6114 fileclose(struct file *f)
6115 {
6116   struct file ff;
6117 
6118   acquire(&ftable.lock);
6119   if(f->ref < 1)
6120     panic("fileclose");
6121   if(--f->ref > 0){
6122     release(&ftable.lock);
6123     return;
6124   }
6125   ff = *f;
6126   f->ref = 0;
6127   f->type = FD_NONE;
6128   release(&ftable.lock);
6129 
6130   if(ff.type == FD_PIPE)
6131     pipeclose(ff.pipe, ff.writable);
6132   else if(ff.type == FD_INODE){
6133     begin_op();
6134     iput(ff.ip);
6135     end_op();
6136   }
6137 }
6138 
6139 
6140 
6141 
6142 
6143 
6144 
6145 
6146 
6147 
6148 
6149 
6150 
6151 int
6152 filestat(struct file *f, struct stat *st)
6153 {
6154   if(f->type == FD_INODE){
6155     ilock(f->ip);
6156     stati(f->ip, st);
6157     iunlock(f->ip);
6158     return 0;
6159   }
6160   return -1;
6161 }
6162 
6163 
6164 int
6165 fileread(struct file *f, char *addr, int n)
6166 {
6167   int r;
6168 
6169   if(f->readable == 0)
6170     return -1;
6171   if(f->type == FD_PIPE)
6172     return piperead(f->pipe, addr, n);
6173   if(f->type == FD_INODE){
6174     ilock(f->ip);
6175     if((r = readi(f->ip, addr, f->off, n)) > 0)
6176       f->off += r;
6177     iunlock(f->ip);
6178     return r;
6179   }
6180   panic("fileread");
6181 }
6182 
6183 
6184 
6185 
6186 
6187 
6188 
6189 
6190 
6191 
6192 
6193 
6194 
6195 
6196 
6197 
6198 
6199 
6200 
6201 int
6202 filewrite(struct file *f, char *addr, int n)
6203 {
6204   int r;
6205 
6206   if(f->writable == 0)
6207     return -1;
6208   if(f->type == FD_PIPE)
6209     return pipewrite(f->pipe, addr, n);
6210   if(f->type == FD_INODE){
6211     
6212     
6213     
6214     
6215     
6216     
6217     int max = ((MAXOPBLOCKS-1-1-2) / 2) * 512;
6218     int i = 0;
6219     while(i < n){
6220       int n1 = n - i;
6221       if(n1 > max)
6222         n1 = max;
6223 
6224       begin_op();
6225       ilock(f->ip);
6226       if ((r = writei(f->ip, addr + i, f->off, n1)) > 0)
6227         f->off += r;
6228       iunlock(f->ip);
6229       end_op();
6230 
6231       if(r < 0)
6232         break;
6233       if(r != n1)
6234         panic("short filewrite");
6235       i += r;
6236     }
6237     return i == n ? n : -1;
6238   }
6239   panic("filewrite");
6240 }
6241 
6242 
6243 
6244 
6245 
6246 
6247 
6248 
6249 
6250 
6251 
6252 
6253 
6254 
6255 
6256 #include "types.h"
6257 #include "defs.h"
6258 #include "param.h"
6259 #include "stat.h"
6260 #include "mmu.h"
6261 #include "proc.h"
6262 #include "fs.h"
6263 #include "spinlock.h"
6264 #include "sleeplock.h"
6265 #include "file.h"
6266 #include "fcntl.h"
6267 
6268 
6269 
6270 static int
6271 argfd(int n, int *pfd, struct file **pf)
6272 {
6273   int fd;
6274   struct file *f;
6275 
6276   if(argint(n, &fd) < 0)
6277     return -1;
6278   if(fd < 0 || fd >= NOFILE || (f=myproc()->ofile[fd]) == 0)
6279     return -1;
6280   if(pfd)
6281     *pfd = fd;
6282   if(pf)
6283     *pf = f;
6284   return 0;
6285 }
6286 
6287 
6288 
6289 
6290 
6291 
6292 
6293 
6294 
6295 
6296 
6297 
6298 
6299 
6300 
6301 
6302 static int
6303 fdalloc(struct file *f)
6304 {
6305   int fd;
6306   struct proc *curproc = myproc();
6307 
6308   for(fd = 0; fd < NOFILE; fd++){
6309     if(curproc->ofile[fd] == 0){
6310       curproc->ofile[fd] = f;
6311       return fd;
6312     }
6313   }
6314   return -1;
6315 }
6316 
6317 int
6318 sys_dup(void)
6319 {
6320   struct file *f;
6321   int fd;
6322 
6323   if(argfd(0, 0, &f) < 0)
6324     return -1;
6325   if((fd=fdalloc(f)) < 0)
6326     return -1;
6327   filedup(f);
6328   return fd;
6329 }
6330 
6331 int
6332 sys_read(void)
6333 {
6334   struct file *f;
6335   int n;
6336   char *p;
6337 
6338   if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
6339     return -1;
6340   return fileread(f, p, n);
6341 }
6342 
6343 
6344 
6345 
6346 
6347 
6348 
6349 
6350 int
6351 sys_write(void)
6352 {
6353   struct file *f;
6354   int n;
6355   char *p;
6356 
6357   if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
6358     return -1;
6359   return filewrite(f, p, n);
6360 }
6361 
6362 int
6363 sys_close(void)
6364 {
6365   int fd;
6366   struct file *f;
6367 
6368   if(argfd(0, &fd, &f) < 0)
6369     return -1;
6370   myproc()->ofile[fd] = 0;
6371   fileclose(f);
6372   return 0;
6373 }
6374 
6375 int
6376 sys_fstat(void)
6377 {
6378   struct file *f;
6379   struct stat *st;
6380 
6381   if(argfd(0, 0, &f) < 0 || argptr(1, (void*)&st, sizeof(*st)) < 0)
6382     return -1;
6383   return filestat(f, st);
6384 }
6385 
6386 
6387 
6388 
6389 
6390 
6391 
6392 
6393 
6394 
6395 
6396 
6397 
6398 
6399 
6400 
6401 int
6402 sys_link(void)
6403 {
6404   char name[DIRSIZ], *new, *old;
6405   struct inode *dp, *ip;
6406 
6407   if(argstr(0, &old) < 0 || argstr(1, &new) < 0)
6408     return -1;
6409 
6410   begin_op();
6411   if((ip = namei(old)) == 0){
6412     end_op();
6413     return -1;
6414   }
6415 
6416   ilock(ip);
6417   if(ip->type == T_DIR){
6418     iunlockput(ip);
6419     end_op();
6420     return -1;
6421   }
6422 
6423   ip->nlink++;
6424   iupdate(ip);
6425   iunlock(ip);
6426 
6427   if((dp = nameiparent(new, name)) == 0)
6428     goto bad;
6429   ilock(dp);
6430   if(dp->dev != ip->dev || dirlink(dp, name, ip->inum) < 0){
6431     iunlockput(dp);
6432     goto bad;
6433   }
6434   iunlockput(dp);
6435   iput(ip);
6436 
6437   end_op();
6438 
6439   return 0;
6440 
6441 bad:
6442   ilock(ip);
6443   ip->nlink--;
6444   iupdate(ip);
6445   iunlockput(ip);
6446   end_op();
6447   return -1;
6448 }
6449 
6450 
6451 static int
6452 isdirempty(struct inode *dp)
6453 {
6454   int off;
6455   struct dirent de;
6456 
6457   for(off=2*sizeof(de); off<dp->size; off+=sizeof(de)){
6458     if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
6459       panic("isdirempty: readi");
6460     if(de.inum != 0)
6461       return 0;
6462   }
6463   return 1;
6464 }
6465 
6466 
6467 
6468 
6469 
6470 
6471 
6472 
6473 
6474 
6475 
6476 
6477 
6478 
6479 
6480 
6481 
6482 
6483 
6484 
6485 
6486 
6487 
6488 
6489 
6490 
6491 
6492 
6493 
6494 
6495 
6496 
6497 
6498 
6499 
6500 int
6501 sys_unlink(void)
6502 {
6503   struct inode *ip, *dp;
6504   struct dirent de;
6505   char name[DIRSIZ], *path;
6506   uint off;
6507 
6508   if(argstr(0, &path) < 0)
6509     return -1;
6510 
6511   begin_op();
6512   if((dp = nameiparent(path, name)) == 0){
6513     end_op();
6514     return -1;
6515   }
6516 
6517   ilock(dp);
6518 
6519   
6520   if(namecmp(name, ".") == 0 || namecmp(name, "..") == 0)
6521     goto bad;
6522 
6523   if((ip = dirlookup(dp, name, &off)) == 0)
6524     goto bad;
6525   ilock(ip);
6526 
6527   if(ip->nlink < 1)
6528     panic("unlink: nlink < 1");
6529   if(ip->type == T_DIR && !isdirempty(ip)){
6530     iunlockput(ip);
6531     goto bad;
6532   }
6533 
6534   memset(&de, 0, sizeof(de));
6535   if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
6536     panic("unlink: writei");
6537   if(ip->type == T_DIR){
6538     dp->nlink--;
6539     iupdate(dp);
6540   }
6541   iunlockput(dp);
6542 
6543   ip->nlink--;
6544   iupdate(ip);
6545   iunlockput(ip);
6546 
6547   end_op();
6548 
6549   return 0;
6550 bad:
6551   iunlockput(dp);
6552   end_op();
6553   return -1;
6554 }
6555 
6556 static struct inode*
6557 create(char *path, short type, short major, short minor)
6558 {
6559   uint off;
6560   struct inode *ip, *dp;
6561   char name[DIRSIZ];
6562 
6563   if((dp = nameiparent(path, name)) == 0)
6564     return 0;
6565   ilock(dp);
6566 
6567   if((ip = dirlookup(dp, name, &off)) != 0){
6568     iunlockput(dp);
6569     ilock(ip);
6570     if(type == T_FILE && ip->type == T_FILE)
6571       return ip;
6572     iunlockput(ip);
6573     return 0;
6574   }
6575 
6576   if((ip = ialloc(dp->dev, type)) == 0)
6577     panic("create: ialloc");
6578 
6579   ilock(ip);
6580   ip->major = major;
6581   ip->minor = minor;
6582   ip->nlink = 1;
6583   iupdate(ip);
6584 
6585   if(type == T_DIR){  
6586     dp->nlink++;  
6587     iupdate(dp);
6588     
6589     if(dirlink(ip, ".", ip->inum) < 0 || dirlink(ip, "..", dp->inum) < 0)
6590       panic("create dots");
6591   }
6592 
6593   if(dirlink(dp, name, ip->inum) < 0)
6594     panic("create: dirlink");
6595 
6596   iunlockput(dp);
6597 
6598   return ip;
6599 }
6600 int
6601 sys_open(void)
6602 {
6603   char *path;
6604   int fd, omode;
6605   struct file *f;
6606   struct inode *ip;
6607 
6608   if(argstr(0, &path) < 0 || argint(1, &omode) < 0)
6609     return -1;
6610 
6611   begin_op();
6612 
6613   if(omode & O_CREATE){
6614     ip = create(path, T_FILE, 0, 0);
6615     if(ip == 0){
6616       end_op();
6617       return -1;
6618     }
6619   } else {
6620     if((ip = namei(path)) == 0){
6621       end_op();
6622       return -1;
6623     }
6624     ilock(ip);
6625     if(ip->type == T_DIR && omode != O_RDONLY){
6626       iunlockput(ip);
6627       end_op();
6628       return -1;
6629     }
6630   }
6631 
6632   if((f = filealloc()) == 0 || (fd = fdalloc(f)) < 0){
6633     if(f)
6634       fileclose(f);
6635     iunlockput(ip);
6636     end_op();
6637     return -1;
6638   }
6639   iunlock(ip);
6640   end_op();
6641 
6642   f->type = FD_INODE;
6643   f->ip = ip;
6644   f->off = 0;
6645   f->readable = !(omode & O_WRONLY);
6646   f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
6647   return fd;
6648 }
6649 
6650 int
6651 sys_mkdir(void)
6652 {
6653   char *path;
6654   struct inode *ip;
6655 
6656   begin_op();
6657   if(argstr(0, &path) < 0 || (ip = create(path, T_DIR, 0, 0)) == 0){
6658     end_op();
6659     return -1;
6660   }
6661   iunlockput(ip);
6662   end_op();
6663   return 0;
6664 }
6665 
6666 int
6667 sys_mknod(void)
6668 {
6669   struct inode *ip;
6670   char *path;
6671   int major, minor;
6672 
6673   begin_op();
6674   if((argstr(0, &path)) < 0 ||
6675      argint(1, &major) < 0 ||
6676      argint(2, &minor) < 0 ||
6677      (ip = create(path, T_DEV, major, minor)) == 0){
6678     end_op();
6679     return -1;
6680   }
6681   iunlockput(ip);
6682   end_op();
6683   return 0;
6684 }
6685 
6686 
6687 
6688 
6689 
6690 
6691 
6692 
6693 
6694 
6695 
6696 
6697 
6698 
6699 
6700 int
6701 sys_chdir(void)
6702 {
6703   char *path;
6704   struct inode *ip;
6705   struct proc *curproc = myproc();
6706 
6707   begin_op();
6708   if(argstr(0, &path) < 0 || (ip = namei(path)) == 0){
6709     end_op();
6710     return -1;
6711   }
6712   ilock(ip);
6713   if(ip->type != T_DIR){
6714     iunlockput(ip);
6715     end_op();
6716     return -1;
6717   }
6718   iunlock(ip);
6719   iput(curproc->cwd);
6720   end_op();
6721   curproc->cwd = ip;
6722   return 0;
6723 }
6724 
6725 int
6726 sys_exec(void)
6727 {
6728   char *path, *argv[MAXARG];
6729   int i;
6730   uint uargv, uarg;
6731 
6732   if(argstr(0, &path) < 0 || argint(1, (int*)&uargv) < 0){
6733     return -1;
6734   }
6735   memset(argv, 0, sizeof(argv));
6736   for(i=0;; i++){
6737     if(i >= NELEM(argv))
6738       return -1;
6739     if(fetchint(uargv+4*i, (int*)&uarg) < 0)
6740       return -1;
6741     if(uarg == 0){
6742       argv[i] = 0;
6743       break;
6744     }
6745     if(fetchstr(uarg, &argv[i]) < 0)
6746       return -1;
6747   }
6748   return exec(path, argv);
6749 }
6750 int
6751 sys_pipe(void)
6752 {
6753   int *fd;
6754   struct file *rf, *wf;
6755   int fd0, fd1;
6756 
6757   if(argptr(0, (void*)&fd, 2*sizeof(fd[0])) < 0)
6758     return -1;
6759   if(pipealloc(&rf, &wf) < 0)
6760     return -1;
6761   fd0 = -1;
6762   if((fd0 = fdalloc(rf)) < 0 || (fd1 = fdalloc(wf)) < 0){
6763     if(fd0 >= 0)
6764       myproc()->ofile[fd0] = 0;
6765     fileclose(rf);
6766     fileclose(wf);
6767     return -1;
6768   }
6769   fd[0] = fd0;
6770   fd[1] = fd1;
6771   return 0;
6772 }
6773 
6774 
6775 
6776 
6777 
6778 
6779 
6780 
6781 
6782 
6783 
6784 
6785 
6786 
6787 
6788 
6789 
6790 
6791 
6792 
6793 
6794 
6795 
6796 
6797 
6798 
6799 
6800 #include "types.h"
6801 #include "param.h"
6802 #include "memlayout.h"
6803 #include "mmu.h"
6804 #include "proc.h"
6805 #include "defs.h"
6806 #include "x86.h"
6807 #include "elf.h"
6808 
6809 int
6810 exec(char *path, char **argv)
6811 {
6812   char *s, *last;
6813   int i, off;
6814   uint argc, sz, sp, ustack[3+MAXARG+1];
6815   struct elfhdr elf;
6816   struct inode *ip;
6817   struct proghdr ph;
6818   pde_t *pgdir, *oldpgdir;
6819   struct proc *curproc = myproc();
6820 
6821   begin_op();
6822 
6823   if((ip = namei(path)) == 0){
6824     end_op();
6825     cprintf("exec: fail\n");
6826     return -1;
6827   }
6828   ilock(ip);
6829   pgdir = 0;
6830 
6831   
6832   if(readi(ip, (char*)&elf, 0, sizeof(elf)) != sizeof(elf))
6833     goto bad;
6834   if(elf.magic != ELF_MAGIC)
6835     goto bad;
6836 
6837   if((pgdir = setupkvm()) == 0)
6838     goto bad;
6839 
6840   
6841   sz = 0;
6842   for(i=0, off=elf.phoff; i<elf.phnum; i++, off+=sizeof(ph)){
6843     if(readi(ip, (char*)&ph, off, sizeof(ph)) != sizeof(ph))
6844       goto bad;
6845     if(ph.type != ELF_PROG_LOAD)
6846       continue;
6847     if(ph.memsz < ph.filesz)
6848       goto bad;
6849     if(ph.vaddr + ph.memsz < ph.vaddr)
6850       goto bad;
6851     if((sz = allocuvm(pgdir, sz, ph.vaddr + ph.memsz)) == 0)
6852       goto bad;
6853     if(ph.vaddr % PGSIZE != 0)
6854       goto bad;
6855     if(loaduvm(pgdir, (char*)ph.vaddr, ip, ph.off, ph.filesz) < 0)
6856       goto bad;
6857   }
6858   iunlockput(ip);
6859   end_op();
6860   ip = 0;
6861 
6862   
6863   
6864   sz = PGROUNDUP(sz);
6865   if((sz = allocuvm(pgdir, sz, sz + 2*PGSIZE)) == 0)
6866     goto bad;
6867   clearpteu(pgdir, (char*)(sz - 2*PGSIZE));
6868   sp = sz;
6869 
6870   
6871   for(argc = 0; argv[argc]; argc++) {
6872     if(argc >= MAXARG)
6873       goto bad;
6874     sp = (sp - (strlen(argv[argc]) + 1)) & ~3;
6875     if(copyout(pgdir, sp, argv[argc], strlen(argv[argc]) + 1) < 0)
6876       goto bad;
6877     ustack[3+argc] = sp;
6878   }
6879   ustack[3+argc] = 0;
6880 
6881   ustack[0] = 0xffffffff;  
6882   ustack[1] = argc;
6883   ustack[2] = sp - (argc+1)*4;  
6884 
6885   sp -= (3+argc+1) * 4;
6886   if(copyout(pgdir, sp, ustack, (3+argc+1)*4) < 0)
6887     goto bad;
6888 
6889   
6890   for(last=s=path; *s; s++)
6891     if(*s == '/')
6892       last = s+1;
6893   safestrcpy(curproc->name, last, sizeof(curproc->name));
6894 
6895   
6896   oldpgdir = curproc->pgdir;
6897   curproc->pgdir = pgdir;
6898   curproc->sz = sz;
6899   curproc->tf->eip = elf.entry;  
6900   curproc->tf->esp = sp;
6901   switchuvm(curproc);
6902   freevm(oldpgdir);
6903   return 0;
6904 
6905  bad:
6906   if(pgdir)
6907     freevm(pgdir);
6908   if(ip){
6909     iunlockput(ip);
6910     end_op();
6911   }
6912   return -1;
6913 }
6914 
6915 
6916 
6917 
6918 
6919 
6920 
6921 
6922 
6923 
6924 
6925 
6926 
6927 
6928 
6929 
6930 
6931 
6932 
6933 
6934 
6935 
6936 
6937 
6938 
6939 
6940 
6941 
6942 
6943 
6944 
6945 
6946 
6947 
6948 
6949 
6950 #include "types.h"
6951 #include "defs.h"
6952 #include "param.h"
6953 #include "mmu.h"
6954 #include "proc.h"
6955 #include "fs.h"
6956 #include "spinlock.h"
6957 #include "sleeplock.h"
6958 #include "file.h"
6959 
6960 #define PIPESIZE 512
6961 
6962 struct pipe {
6963   struct spinlock lock;
6964   char data[PIPESIZE];
6965   uint nread;     
6966   uint nwrite;    
6967   int readopen;   
6968   int writeopen;  
6969 };
6970 
6971 int
6972 pipealloc(struct file **f0, struct file **f1)
6973 {
6974   struct pipe *p;
6975 
6976   p = 0;
6977   *f0 = *f1 = 0;
6978   if((*f0 = filealloc()) == 0 || (*f1 = filealloc()) == 0)
6979     goto bad;
6980   if((p = (struct pipe*)kalloc()) == 0)
6981     goto bad;
6982   p->readopen = 1;
6983   p->writeopen = 1;
6984   p->nwrite = 0;
6985   p->nread = 0;
6986   initlock(&p->lock, "pipe");
6987   (*f0)->type = FD_PIPE;
6988   (*f0)->readable = 1;
6989   (*f0)->writable = 0;
6990   (*f0)->pipe = p;
6991   (*f1)->type = FD_PIPE;
6992   (*f1)->readable = 0;
6993   (*f1)->writable = 1;
6994   (*f1)->pipe = p;
6995   return 0;
6996 
6997 
6998 
6999 
7000  bad:
7001   if(p)
7002     kfree((char*)p);
7003   if(*f0)
7004     fileclose(*f0);
7005   if(*f1)
7006     fileclose(*f1);
7007   return -1;
7008 }
7009 
7010 void
7011 pipeclose(struct pipe *p, int writable)
7012 {
7013   acquire(&p->lock);
7014   if(writable){
7015     p->writeopen = 0;
7016     wakeup(&p->nread);
7017   } else {
7018     p->readopen = 0;
7019     wakeup(&p->nwrite);
7020   }
7021   if(p->readopen == 0 && p->writeopen == 0){
7022     release(&p->lock);
7023     kfree((char*)p);
7024   } else
7025     release(&p->lock);
7026 }
7027 
7028 
7029 int
7030 pipewrite(struct pipe *p, char *addr, int n)
7031 {
7032   int i;
7033 
7034   acquire(&p->lock);
7035   for(i = 0; i < n; i++){
7036     while(p->nwrite == p->nread + PIPESIZE){  
7037       if(p->readopen == 0 || myproc()->killed){
7038         release(&p->lock);
7039         return -1;
7040       }
7041       wakeup(&p->nread);
7042       sleep(&p->nwrite, &p->lock);  
7043     }
7044     p->data[p->nwrite++ % PIPESIZE] = addr[i];
7045   }
7046   wakeup(&p->nread);  
7047   release(&p->lock);
7048   return n;
7049 }
7050 int
7051 piperead(struct pipe *p, char *addr, int n)
7052 {
7053   int i;
7054 
7055   acquire(&p->lock);
7056   while(p->nread == p->nwrite && p->writeopen){  
7057     if(myproc()->killed){
7058       release(&p->lock);
7059       return -1;
7060     }
7061     sleep(&p->nread, &p->lock); 
7062   }
7063   for(i = 0; i < n; i++){  
7064     if(p->nread == p->nwrite)
7065       break;
7066     addr[i] = p->data[p->nread++ % PIPESIZE];
7067   }
7068   wakeup(&p->nwrite);  
7069   release(&p->lock);
7070   return i;
7071 }
7072 
7073 
7074 
7075 
7076 
7077 
7078 
7079 
7080 
7081 
7082 
7083 
7084 
7085 
7086 
7087 
7088 
7089 
7090 
7091 
7092 
7093 
7094 
7095 
7096 
7097 
7098 
7099 
7100 #include "types.h"
7101 #include "x86.h"
7102 
7103 void*
7104 memset(void *dst, int c, uint n)
7105 {
7106   if ((int)dst%4 == 0 && n%4 == 0){
7107     c &= 0xFF;
7108     stosl(dst, (c<<24)|(c<<16)|(c<<8)|c, n/4);
7109   } else
7110     stosb(dst, c, n);
7111   return dst;
7112 }
7113 
7114 int
7115 memcmp(const void *v1, const void *v2, uint n)
7116 {
7117   const uchar *s1, *s2;
7118 
7119   s1 = v1;
7120   s2 = v2;
7121   while(n-- > 0){
7122     if(*s1 != *s2)
7123       return *s1 - *s2;
7124     s1++, s2++;
7125   }
7126 
7127   return 0;
7128 }
7129 
7130 void*
7131 memmove(void *dst, const void *src, uint n)
7132 {
7133   const char *s;
7134   char *d;
7135 
7136   s = src;
7137   d = dst;
7138   if(s < d && s + n > d){
7139     s += n;
7140     d += n;
7141     while(n-- > 0)
7142       *--d = *--s;
7143   } else
7144     while(n-- > 0)
7145       *d++ = *s++;
7146 
7147   return dst;
7148 }
7149 
7150 
7151 void*
7152 memcpy(void *dst, const void *src, uint n)
7153 {
7154   return memmove(dst, src, n);
7155 }
7156 
7157 int
7158 strncmp(const char *p, const char *q, uint n)
7159 {
7160   while(n > 0 && *p && *p == *q)
7161     n--, p++, q++;
7162   if(n == 0)
7163     return 0;
7164   return (uchar)*p - (uchar)*q;
7165 }
7166 
7167 char*
7168 strncpy(char *s, const char *t, int n)
7169 {
7170   char *os;
7171 
7172   os = s;
7173   while(n-- > 0 && (*s++ = *t++) != 0)
7174     ;
7175   while(n-- > 0)
7176     *s++ = 0;
7177   return os;
7178 }
7179 
7180 
7181 char*
7182 safestrcpy(char *s, const char *t, int n)
7183 {
7184   char *os;
7185 
7186   os = s;
7187   if(n <= 0)
7188     return os;
7189   while(--n > 0 && (*s++ = *t++) != 0)
7190     ;
7191   *s = 0;
7192   return os;
7193 }
7194 
7195 
7196 
7197 
7198 
7199 
7200 int
7201 strlen(const char *s)
7202 {
7203   int n;
7204 
7205   for(n = 0; s[n]; n++)
7206     ;
7207   return n;
7208 }
7209 
7210 
7211 
7212 
7213 
7214 
7215 
7216 
7217 
7218 
7219 
7220 
7221 
7222 
7223 
7224 
7225 
7226 
7227 
7228 
7229 
7230 
7231 
7232 
7233 
7234 
7235 
7236 
7237 
7238 
7239 
7240 
7241 
7242 
7243 
7244 
7245 
7246 
7247 
7248 
7249 
7250 
7251 
7252 struct mp {             
7253   uchar signature[4];           
7254   void *physaddr;               
7255   uchar length;                 
7256   uchar specrev;                
7257   uchar checksum;               
7258   uchar type;                   
7259   uchar imcrp;
7260   uchar reserved[3];
7261 };
7262 
7263 struct mpconf {         
7264   uchar signature[4];           
7265   ushort length;                
7266   uchar version;                
7267   uchar checksum;               
7268   uchar product[20];            
7269   uint *oemtable;               
7270   ushort oemlength;             
7271   ushort entry;                 
7272   uint *lapicaddr;              
7273   ushort xlength;               
7274   uchar xchecksum;              
7275   uchar reserved;
7276 };
7277 
7278 struct mpproc {         
7279   uchar type;                   
7280   uchar apicid;                 
7281   uchar version;                
7282   uchar flags;                  
7283     #define MPBOOT 0x02           
7284   uchar signature[4];           
7285   uint feature;                 
7286   uchar reserved[8];
7287 };
7288 
7289 struct mpioapic {       
7290   uchar type;                   
7291   uchar apicno;                 
7292   uchar version;                
7293   uchar flags;                  
7294   uint *addr;                  
7295 };
7296 
7297 
7298 
7299 
7300 
7301 #define MPPROC    0x00  
7302 #define MPBUS     0x01  
7303 #define MPIOAPIC  0x02  
7304 #define MPIOINTR  0x03  
7305 #define MPLINTR   0x04  
7306 
7307 
7308 
7309 
7310 
7311 
7312 
7313 
7314 
7315 
7316 
7317 
7318 
7319 
7320 
7321 
7322 
7323 
7324 
7325 
7326 
7327 
7328 
7329 
7330 
7331 
7332 
7333 
7334 
7335 
7336 
7337 
7338 
7339 
7340 
7341 
7342 
7343 
7344 
7345 
7346 
7347 
7348 
7349 
7350 
7351 
7352 
7353 
7354 
7355 
7356 
7357 
7358 
7359 
7360 
7361 
7362 
7363 
7364 
7365 
7366 
7367 
7368 
7369 
7370 
7371 
7372 
7373 
7374 
7375 
7376 
7377 
7378 
7379 
7380 
7381 
7382 
7383 
7384 
7385 
7386 
7387 
7388 
7389 
7390 
7391 
7392 
7393 
7394 
7395 
7396 
7397 
7398 
7399 
7400 
7401 
7402 
7403 
7404 #include "types.h"
7405 #include "defs.h"
7406 #include "param.h"
7407 #include "memlayout.h"
7408 #include "mp.h"
7409 #include "x86.h"
7410 #include "mmu.h"
7411 #include "proc.h"
7412 
7413 struct cpu cpus[NCPU];
7414 int ncpu;
7415 uchar ioapicid;
7416 
7417 static uchar
7418 sum(uchar *addr, int len)
7419 {
7420   int i, sum;
7421 
7422   sum = 0;
7423   for(i=0; i<len; i++)
7424     sum += addr[i];
7425   return sum;
7426 }
7427 
7428 
7429 static struct mp*
7430 mpsearch1(uint a, int len)
7431 {
7432   uchar *e, *p, *addr;
7433 
7434   addr = P2V(a);
7435   e = addr+len;
7436   while(1){asm("hlt");}
7437   for(p = addr; p < e; p += sizeof(struct mp))
7438     if(memcmp(p, "_MP_", 4) == 0 && sum(p, sizeof(struct mp)) == 0)
7439       return (struct mp*)p;
7440   return 0;
7441 }
7442 
7443 
7444 
7445 
7446 
7447 
7448 
7449 
7450 
7451 
7452 
7453 
7454 
7455 static struct mp*
7456 mpsearch(void)
7457 {
7458   uchar *bda;
7459   uint p;
7460   struct mp *mp;
7461 
7462   bda = (uchar *) P2V(0x400);
7463   if((p = ((bda[0x0F]<<8)| bda[0x0E]) << 4)){
7464     if((mp = mpsearch1(p, 1024)))
7465       return mp;
7466   } else {
7467     p = ((bda[0x14]<<8)|bda[0x13])*1024;
7468     if((mp = mpsearch1(p-1024, 1024)))
7469       return mp;
7470   }
7471   return mpsearch1(0xF0000, 0x10000);
7472 }
7473 
7474 
7475 
7476 
7477 
7478 
7479 static struct mpconf*
7480 mpconfig(struct mp **pmp)
7481 {
7482   struct mpconf *conf;
7483   struct mp *mp;
7484 
7485   if((mp = mpsearch()) == 0 || mp->physaddr == 0)
7486     return 0;
7487   conf = (struct mpconf*) P2V((uint) mp->physaddr);
7488   if(memcmp(conf, "PCMP", 4) != 0)
7489     return 0;
7490   if(conf->version != 1 && conf->version != 4)
7491     return 0;
7492   if(sum((uchar*)conf, conf->length) != 0)
7493     return 0;
7494   *pmp = mp;
7495   return conf;
7496 }
7497 
7498 
7499 
7500 void
7501 mpinit(void)
7502 {
7503   uchar *p, *e;
7504   int ismp;
7505   struct mp *mp;
7506   struct mpconf *conf;
7507   struct mpproc *proc;
7508   struct mpioapic *ioapic;
7509 
7510   if((conf = mpconfig(&mp)) == 0)
7511     panic("Expect to run on an SMP");
7512   ismp = 1;
7513   lapic = (uint*)conf->lapicaddr;
7514   for(p=(uchar*)(conf+1), e=(uchar*)conf+conf->length; p<e; ){
7515     switch(*p){
7516     case MPPROC:
7517       proc = (struct mpproc*)p;
7518       if(ncpu < NCPU) {
7519         cpus[ncpu].apicid = proc->apicid;  
7520         ncpu++;
7521       }
7522       p += sizeof(struct mpproc);
7523       continue;
7524     case MPIOAPIC:
7525       ioapic = (struct mpioapic*)p;
7526       ioapicid = ioapic->apicno;
7527       p += sizeof(struct mpioapic);
7528       continue;
7529     case MPBUS:
7530     case MPIOINTR:
7531     case MPLINTR:
7532       p += 8;
7533       continue;
7534     default:
7535       ismp = 0;
7536       break;
7537     }
7538   }
7539   if(!ismp)
7540     panic("Didn't find a suitable machine");
7541 
7542   if(mp->imcrp){
7543     
7544     
7545     outb(0x22, 0x70);   
7546     outb(0x23, inb(0x23) | 1);  
7547   }
7548 }
7549 
7550 
7551 
7552 
7553 #include "param.h"
7554 #include "types.h"
7555 #include "defs.h"
7556 #include "date.h"
7557 #include "memlayout.h"
7558 #include "traps.h"
7559 #include "mmu.h"
7560 #include "x86.h"
7561 #include "debug.h"
7562 
7563 #define ID      (0x0020/4)   
7564 #define VER     (0x0030/4)   
7565 #define TPR     (0x0080/4)   
7566 #define EOI     (0x00B0/4)   
7567 #define SVR     (0x00F0/4)   
7568   #define ENABLE     0x00000100   
7569 #define ESR     (0x0280/4)   
7570 #define ICRLO   (0x0300/4)   
7571   #define INIT       0x00000500   
7572   #define STARTUP    0x00000600   
7573   #define DELIVS     0x00001000   
7574   #define ASSERT     0x00004000   
7575   #define DEASSERT   0x00000000
7576   #define LEVEL      0x00008000   
7577   #define BCAST      0x00080000   
7578   #define BUSY       0x00001000
7579   #define FIXED      0x00000000
7580 #define ICRHI   (0x0310/4)   
7581 #define TIMER   (0x0320/4)   
7582   #define X1         0x0000000B   
7583   #define PERIODIC   0x00020000   
7584 #define PCINT   (0x0340/4)   
7585 #define LINT0   (0x0350/4)   
7586 #define LINT1   (0x0360/4)   
7587 #define ERROR   (0x0370/4)   
7588   #define MASKED     0x00010000   
7589 #define TICR    (0x0380/4)   
7590 #define TCCR    (0x0390/4)   
7591 #define TDCR    (0x03E0/4)   
7592 
7593 volatile uint *lapic;  
7594 
7595 
7596 
7597 
7598 
7599 
7600 static void
7601 lapicw(int index, int value)
7602 {
7603   lapic[index] = value;
7604   lapic[ID];  
7605 }
7606 
7607 void
7608 lapicinit(void)
7609 {
7610   if(!lapic)
7611     return;
7612 
7613   
7614   lapicw(SVR, ENABLE | (T_IRQ0 + IRQ_SPURIOUS));
7615 
7616   
7617   
7618   
7619   
7620   lapicw(TDCR, X1);
7621   lapicw(TIMER, PERIODIC | (T_IRQ0 + IRQ_TIMER));
7622   lapicw(TICR, 10000000);
7623 
7624   
7625   lapicw(LINT0, MASKED);
7626   lapicw(LINT1, MASKED);
7627 
7628   
7629   
7630   if(((lapic[VER]>>16) & 0xFF) >= 4)
7631     lapicw(PCINT, MASKED);
7632 
7633   
7634   lapicw(ERROR, T_IRQ0 + IRQ_ERROR);
7635 
7636   
7637   lapicw(ESR, 0);
7638   lapicw(ESR, 0);
7639 
7640   
7641   lapicw(EOI, 0);
7642 
7643   
7644   lapicw(ICRHI, 0);
7645   lapicw(ICRLO, BCAST | INIT | LEVEL);
7646   while(lapic[ICRLO] & DELIVS)
7647     ;
7648 
7649 
7650   
7651   lapicw(TPR, 0);
7652 }
7653 
7654 int
7655 lapicid(void)
7656 {
7657 
7658   if (!lapic){
7659     return 0;
7660   }
7661   return lapic[ID] >> 24;
7662 }
7663 
7664 
7665 void
7666 lapiceoi(void)
7667 {
7668   if(lapic)
7669     lapicw(EOI, 0);
7670 }
7671 
7672 
7673 
7674 void
7675 microdelay(int us)
7676 {
7677 }
7678 
7679 #define CMOS_PORT    0x70
7680 #define CMOS_RETURN  0x71
7681 
7682 
7683 
7684 void
7685 lapicstartap(uchar apicid, uint addr)
7686 {
7687   int i;
7688   ushort *wrv;
7689 
7690   
7691   
7692   
7693   outb(CMOS_PORT, 0xF);  
7694   outb(CMOS_PORT+1, 0x0A);
7695   wrv = (ushort*)P2V((0x40<<4 | 0x67));  
7696   wrv[0] = 0;
7697   wrv[1] = addr >> 4;
7698 
7699 
7700   
7701   
7702   lapicw(ICRHI, apicid<<24);
7703   lapicw(ICRLO, INIT | LEVEL | ASSERT);
7704   microdelay(200);
7705   lapicw(ICRLO, INIT | LEVEL);
7706   microdelay(100);    
7707 
7708   
7709   
7710   
7711   
7712   
7713   for(i = 0; i < 2; i++){
7714     lapicw(ICRHI, apicid<<24);
7715     lapicw(ICRLO, STARTUP | (addr>>12));
7716     microdelay(200);
7717   }
7718 }
7719 
7720 #define CMOS_STATA   0x0a
7721 #define CMOS_STATB   0x0b
7722 #define CMOS_UIP    (1 << 7)        
7723 
7724 #define SECS    0x00
7725 #define MINS    0x02
7726 #define HOURS   0x04
7727 #define DAY     0x07
7728 #define MONTH   0x08
7729 #define YEAR    0x09
7730 
7731 static uint cmos_read(uint reg)
7732 {
7733   outb(CMOS_PORT,  reg);
7734   microdelay(200);
7735 
7736   return inb(CMOS_RETURN);
7737 }
7738 
7739 static void fill_rtcdate(struct rtcdate *r)
7740 {
7741   r->second = cmos_read(SECS);
7742   r->minute = cmos_read(MINS);
7743   r->hour   = cmos_read(HOURS);
7744   r->day    = cmos_read(DAY);
7745   r->month  = cmos_read(MONTH);
7746   r->year   = cmos_read(YEAR);
7747 }
7748 
7749 
7750 
7751 void cmostime(struct rtcdate *r)
7752 {
7753   struct rtcdate t1, t2;
7754   int sb, bcd;
7755 
7756   sb = cmos_read(CMOS_STATB);
7757 
7758   bcd = (sb & (1 << 2)) == 0;
7759 
7760   
7761   for(;;) {
7762     fill_rtcdate(&t1);
7763     if(cmos_read(CMOS_STATA) & CMOS_UIP)
7764         continue;
7765     fill_rtcdate(&t2);
7766     if(memcmp(&t1, &t2, sizeof(t1)) == 0)
7767       break;
7768   }
7769 
7770   
7771   if(bcd) {
7772 #define    CONV(x)     (t1.x = ((t1.x >> 4) * 10) + (t1.x & 0xf))
7773     CONV(second);
7774     CONV(minute);
7775     CONV(hour  );
7776     CONV(day   );
7777     CONV(month );
7778     CONV(year  );
7779 #undef     CONV
7780   }
7781 
7782   *r = t1;
7783   r->year += 2000;
7784 }
7785 
7786 
7787 
7788 
7789 
7790 
7791 
7792 
7793 
7794 
7795 
7796 
7797 
7798 
7799 
7800 
7801 
7802 
7803 
7804 #include "types.h"
7805 #include "defs.h"
7806 #include "traps.h"
7807 
7808 #define IOAPIC  0xFEC00000   
7809 
7810 #define REG_ID     0x00  
7811 #define REG_VER    0x01  
7812 #define REG_TABLE  0x10  
7813 
7814 
7815 
7816 
7817 
7818 
7819 #define INT_DISABLED   0x00010000  
7820 #define INT_LEVEL      0x00008000  
7821 #define INT_ACTIVELOW  0x00002000  
7822 #define INT_LOGICAL    0x00000800  
7823 
7824 volatile struct ioapic *ioapic;
7825 
7826 
7827 struct ioapic {
7828   uint reg;
7829   uint pad[3];
7830   uint data;
7831 };
7832 
7833 static uint
7834 ioapicread(int reg)
7835 {
7836   ioapic->reg = reg;
7837   return ioapic->data;
7838 }
7839 
7840 static void
7841 ioapicwrite(int reg, uint data)
7842 {
7843   ioapic->reg = reg;
7844   ioapic->data = data;
7845 }
7846 
7847 
7848 
7849 
7850 void
7851 ioapicinit(void)
7852 {
7853   int i, id, maxintr;
7854 
7855   ioapic = (volatile struct ioapic*)IOAPIC;
7856   maxintr = (ioapicread(REG_VER) >> 16) & 0xFF;
7857   id = ioapicread(REG_ID) >> 24;
7858   if(id != ioapicid)
7859     cprintf("ioapicinit: id isn't equal to ioapicid; not a MP\n");
7860 
7861   
7862   
7863   for(i = 0; i <= maxintr; i++){
7864     ioapicwrite(REG_TABLE+2*i, INT_DISABLED | (T_IRQ0 + i));
7865     ioapicwrite(REG_TABLE+2*i+1, 0);
7866   }
7867 }
7868 
7869 void
7870 ioapicenable(int irq, int cpunum)
7871 {
7872   
7873   
7874   
7875   ioapicwrite(REG_TABLE+2*irq, T_IRQ0 + irq);
7876   ioapicwrite(REG_TABLE+2*irq+1, cpunum << 24);
7877 }
7878 
7879 
7880 
7881 
7882 
7883 
7884 
7885 
7886 
7887 
7888 
7889 
7890 
7891 
7892 
7893 
7894 
7895 
7896 
7897 
7898 
7899 
7900 
7901 
7902 #define KBSTATP         0x64    
7903 #define KBS_DIB         0x01    
7904 #define KBDATAP         0x60    
7905 
7906 #define NO              0
7907 
7908 #define SHIFT           (1<<0)
7909 #define CTL             (1<<1)
7910 #define ALT             (1<<2)
7911 
7912 #define CAPSLOCK        (1<<3)
7913 #define NUMLOCK         (1<<4)
7914 #define SCROLLLOCK      (1<<5)
7915 
7916 #define E0ESC           (1<<6)
7917 
7918 
7919 #define KEY_HOME        0xE0
7920 #define KEY_END         0xE1
7921 #define KEY_UP          0xE2
7922 #define KEY_DN          0xE3
7923 #define KEY_LF          0xE4
7924 #define KEY_RT          0xE5
7925 #define KEY_PGUP        0xE6
7926 #define KEY_PGDN        0xE7
7927 #define KEY_INS         0xE8
7928 #define KEY_DEL         0xE9
7929 
7930 
7931 #define C(x) (x - '@')
7932 
7933 static uchar shiftcode[256] =
7934 {
7935   [0x1D] CTL,
7936   [0x2A] SHIFT,
7937   [0x36] SHIFT,
7938   [0x38] ALT,
7939   [0x9D] CTL,
7940   [0xB8] ALT
7941 };
7942 
7943 static uchar togglecode[256] =
7944 {
7945   [0x3A] CAPSLOCK,
7946   [0x45] NUMLOCK,
7947   [0x46] SCROLLLOCK
7948 };
7949 
7950 static uchar normalmap[256] =
7951 {
7952   NO,   0x1B, '1',  '2',  '3',  '4',  '5',  '6',  
7953   '7',  '8',  '9',  '0',  '-',  '=',  '\b', '\t',
7954   'q',  'w',  'e',  'r',  't',  'y',  'u',  'i',  
7955   'o',  'p',  '[',  ']',  '\n', NO,   'a',  's',
7956   'd',  'f',  'g',  'h',  'j',  'k',  'l',  ';',  
7957   '\'', '`',  NO,   '\\', 'z',  'x',  'c',  'v',
7958   'b',  'n',  'm',  ',',  '.',  '/',  NO,   '*',  
7959   NO,   ' ',  NO,   NO,   NO,   NO,   NO,   NO,
7960   NO,   NO,   NO,   NO,   NO,   NO,   NO,   '7',  
7961   '8',  '9',  '-',  '4',  '5',  '6',  '+',  '1',
7962   '2',  '3',  '0',  '.',  NO,   NO,   NO,   NO,   
7963   [0x9C] '\n',      
7964   [0xB5] '/',       
7965   [0xC8] KEY_UP,    [0xD0] KEY_DN,
7966   [0xC9] KEY_PGUP,  [0xD1] KEY_PGDN,
7967   [0xCB] KEY_LF,    [0xCD] KEY_RT,
7968   [0x97] KEY_HOME,  [0xCF] KEY_END,
7969   [0xD2] KEY_INS,   [0xD3] KEY_DEL
7970 };
7971 
7972 static uchar shiftmap[256] =
7973 {
7974   NO,   033,  '!',  '@',  '#',  '$',  '%',  '^',  
7975   '&',  '*',  '(',  ')',  '_',  '+',  '\b', '\t',
7976   'Q',  'W',  'E',  'R',  'T',  'Y',  'U',  'I',  
7977   'O',  'P',  '{',  '}',  '\n', NO,   'A',  'S',
7978   'D',  'F',  'G',  'H',  'J',  'K',  'L',  ':',  
7979   '"',  '~',  NO,   '|',  'Z',  'X',  'C',  'V',
7980   'B',  'N',  'M',  '<',  '>',  '?',  NO,   '*',  
7981   NO,   ' ',  NO,   NO,   NO,   NO,   NO,   NO,
7982   NO,   NO,   NO,   NO,   NO,   NO,   NO,   '7',  
7983   '8',  '9',  '-',  '4',  '5',  '6',  '+',  '1',
7984   '2',  '3',  '0',  '.',  NO,   NO,   NO,   NO,   
7985   [0x9C] '\n',      
7986   [0xB5] '/',       
7987   [0xC8] KEY_UP,    [0xD0] KEY_DN,
7988   [0xC9] KEY_PGUP,  [0xD1] KEY_PGDN,
7989   [0xCB] KEY_LF,    [0xCD] KEY_RT,
7990   [0x97] KEY_HOME,  [0xCF] KEY_END,
7991   [0xD2] KEY_INS,   [0xD3] KEY_DEL
7992 };
7993 
7994 
7995 
7996 
7997 
7998 
7999 
8000 static uchar ctlmap[256] =
8001 {
8002   NO,      NO,      NO,      NO,      NO,      NO,      NO,      NO,
8003   NO,      NO,      NO,      NO,      NO,      NO,      NO,      NO,
8004   C('Q'),  C('W'),  C('E'),  C('R'),  C('T'),  C('Y'),  C('U'),  C('I'),
8005   C('O'),  C('P'),  NO,      NO,      '\r',    NO,      C('A'),  C('S'),
8006   C('D'),  C('F'),  C('G'),  C('H'),  C('J'),  C('K'),  C('L'),  NO,
8007   NO,      NO,      NO,      C('\\'), C('Z'),  C('X'),  C('C'),  C('V'),
8008   C('B'),  C('N'),  C('M'),  NO,      NO,      C('/'),  NO,      NO,
8009   [0x9C] '\r',      
8010   [0xB5] C('/'),    
8011   [0xC8] KEY_UP,    [0xD0] KEY_DN,
8012   [0xC9] KEY_PGUP,  [0xD1] KEY_PGDN,
8013   [0xCB] KEY_LF,    [0xCD] KEY_RT,
8014   [0x97] KEY_HOME,  [0xCF] KEY_END,
8015   [0xD2] KEY_INS,   [0xD3] KEY_DEL
8016 };
8017 
8018 
8019 
8020 
8021 
8022 
8023 
8024 
8025 
8026 
8027 
8028 
8029 
8030 
8031 
8032 
8033 
8034 
8035 
8036 
8037 
8038 
8039 
8040 
8041 
8042 
8043 
8044 
8045 
8046 
8047 
8048 
8049 
8050 #include "types.h"
8051 #include "x86.h"
8052 #include "defs.h"
8053 #include "kbd.h"
8054 
8055 int
8056 kbdgetc(void)
8057 {
8058   static uint shift;
8059   static uchar *charcode[4] = {
8060     normalmap, shiftmap, ctlmap, ctlmap
8061   };
8062   uint st, data, c;
8063 
8064   st = inb(KBSTATP);
8065   if((st & KBS_DIB) == 0)
8066     return -1;
8067   data = inb(KBDATAP);
8068 
8069   if(data == 0xE0){
8070     shift |= E0ESC;
8071     return 0;
8072   } else if(data & 0x80){
8073     
8074     data = (shift & E0ESC ? data : data & 0x7F);
8075     shift &= ~(shiftcode[data] | E0ESC);
8076     return 0;
8077   } else if(shift & E0ESC){
8078     
8079     data |= 0x80;
8080     shift &= ~E0ESC;
8081   }
8082 
8083   shift |= shiftcode[data];
8084   shift ^= togglecode[data];
8085   c = charcode[shift & (CTL | SHIFT)][data];
8086   if(shift & CAPSLOCK){
8087     if('a' <= c && c <= 'z')
8088       c += 'A' - 'a';
8089     else if('A' <= c && c <= 'Z')
8090       c += 'a' - 'A';
8091   }
8092   return c;
8093 }
8094 
8095 void
8096 kbdintr(void)
8097 {
8098   consoleintr(kbdgetc);
8099 }
8100 
8101 
8102 
8103 
8104 #include "types.h"
8105 #include "defs.h"
8106 #include "param.h"
8107 #include "traps.h"
8108 #include "spinlock.h"
8109 #include "sleeplock.h"
8110 #include "fs.h"
8111 #include "file.h"
8112 #include "memlayout.h"
8113 #include "mmu.h"
8114 #include "proc.h"
8115 #include "x86.h"
8116 #include "font.h"
8117 #include "graphic.h"
8118 
8119 static void consputc(int);
8120 
8121 static int panicked = 0;
8122 
8123 static struct {
8124   struct spinlock lock;
8125   int locking;
8126 } cons;
8127 
8128 static void
8129 printint(int xx, int base, int sign)
8130 {
8131   static char digits[] = "0123456789abcdef";
8132   char buf[16];
8133   int i;
8134   uint x;
8135 
8136   if(sign && (sign = xx < 0))
8137     x = -xx;
8138   else
8139     x = xx;
8140 
8141   i = 0;
8142   do{
8143     buf[i++] = digits[x % base];
8144   }while((x /= base) != 0);
8145 
8146   if(sign)
8147     buf[i++] = '-';
8148 
8149 
8150   while(--i >= 0)
8151     consputc(buf[i]);
8152 }
8153 
8154 
8155 
8156 
8157 
8158 
8159 
8160 
8161 
8162 
8163 
8164 
8165 
8166 
8167 
8168 
8169 
8170 
8171 
8172 
8173 
8174 
8175 
8176 
8177 
8178 
8179 
8180 
8181 
8182 
8183 
8184 
8185 
8186 
8187 
8188 
8189 
8190 
8191 
8192 
8193 
8194 
8195 
8196 
8197 
8198 
8199 
8200 
8201 void
8202 cprintf(char *fmt, ...)
8203 {
8204   int i, c, locking;
8205   uint *argp;
8206   char *s;
8207 
8208   locking = cons.locking;
8209   if(locking)
8210     acquire(&cons.lock);
8211 
8212   if (fmt == 0)
8213     panic("null fmt");
8214 
8215 
8216   argp = (uint*)(void*)(&fmt + 1);
8217   for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
8218     if(c != '%'){
8219       consputc(c);
8220       continue;
8221     }
8222     c = fmt[++i] & 0xff;
8223     if(c == 0)
8224       break;
8225     switch(c){
8226     case 'd':
8227       printint(*argp++, 10, 1);
8228       break;
8229     case 'x':
8230     case 'p':
8231       printint(*argp++, 16, 0);
8232       break;
8233     case 's':
8234       if((s = (char*)*argp++) == 0)
8235         s = "(null)";
8236       for(; *s; s++)
8237         consputc(*s);
8238       break;
8239     case '%':
8240       consputc('%');
8241       break;
8242     default:
8243       
8244       consputc('%');
8245       consputc(c);
8246       break;
8247     }
8248   }
8249 
8250   if(locking)
8251     release(&cons.lock);
8252 }
8253 
8254 void
8255 panic(char *s)
8256 {
8257   int i;
8258   uint pcs[10];
8259 
8260   cli();
8261   cons.locking = 0;
8262   
8263   cprintf("lapicid %d: panic: ", lapicid());
8264   cprintf(s);
8265   cprintf("\n");
8266   getcallerpcs(&s, pcs);
8267   for(i=0; i<10; i++)
8268     cprintf(" %p", pcs[i]);
8269   panicked = 1; 
8270   for(;;)
8271     ;
8272 }
8273 
8274 
8275 
8276 
8277 
8278 
8279 
8280 
8281 
8282 
8283 
8284 
8285 
8286 
8287 
8288 
8289 
8290 
8291 
8292 
8293 
8294 
8295 
8296 
8297 
8298 
8299 
8300 #define BACKSPACE 0x100
8301 #define CRTPORT 0x3d4
8302 /*static ushort *crt = (ushort*)P2V(0xb8000);  
8303 
8304 static void
8305 cgaputc(int c)
8306 {
8307   int pos;
8308 
8309   
8310   outb(CRTPORT, 14);
8311   pos = inb(CRTPORT+1) << 8;
8312   outb(CRTPORT, 15);
8313   pos |= inb(CRTPORT+1);
8314 
8315   if(c == '\n')
8316     pos += 80 - pos%80;
8317   else if(c == BACKSPACE){
8318     if(pos > 0) --pos;
8319   } else
8320     crt[pos++] = (c&0xff) | 0x0700;  
8321 
8322   if(pos < 0 || pos > 25*80)
8323     panic("pos under/overflow");
8324 
8325   if((pos/80) >= 24){  
8326     memmove(crt, crt+80, sizeof(crt[0])*23*80);
8327     pos -= 80;
8328     memset(crt+pos, 0, sizeof(crt[0])*(24*80 - pos));
8329   }
8330 
8331   outb(CRTPORT, 14);
8332   outb(CRTPORT+1, pos>>8);
8333   outb(CRTPORT, 15);
8334   outb(CRTPORT+1, pos);
8335   crt[pos] = ' ' | 0x0700;
8336 }*/
8337 
8338 
8339 #define CONSOLE_HORIZONTAL_MAX 53
8340 #define CONSOLE_VERTICAL_MAX 20
8341 int console_pos = CONSOLE_HORIZONTAL_MAX*(CONSOLE_VERTICAL_MAX);
8342 
8343 void graphic_putc(int c){
8344   if(c == '\n'){
8345     console_pos += CONSOLE_HORIZONTAL_MAX - console_pos%CONSOLE_HORIZONTAL_MAX;
8346     if(console_pos >= CONSOLE_VERTICAL_MAX * CONSOLE_HORIZONTAL_MAX){
8347       console_pos -= CONSOLE_HORIZONTAL_MAX;
8348       graphic_scroll_up(30);
8349     }
8350   }else if(c == BACKSPACE){
8351     if(console_pos>0) --console_pos;
8352   }else{
8353     if(console_pos >= CONSOLE_VERTICAL_MAX * CONSOLE_HORIZONTAL_MAX){
8354       console_pos -= CONSOLE_HORIZONTAL_MAX;
8355       graphic_scroll_up(30);
8356     }
8357     int x = (console_pos%CONSOLE_HORIZONTAL_MAX)*FONT_WIDTH + 2;
8358     int y = (console_pos/CONSOLE_HORIZONTAL_MAX)*FONT_HEIGHT;
8359     font_render(x,y,c);
8360     console_pos++;
8361   }
8362 }
8363 
8364 
8365 void
8366 consputc(int c)
8367 {
8368   if(panicked){
8369     cli();
8370     for(;;)
8371       ;
8372   }
8373 
8374   if(c == BACKSPACE){
8375     uartputc('\b'); uartputc(' '); uartputc('\b');
8376   } else {
8377     uartputc(c);
8378   }
8379   graphic_putc(c);
8380 }
8381 
8382 #define INPUT_BUF 128
8383 struct {
8384   char buf[INPUT_BUF];
8385   uint r;  
8386   uint w;  
8387   uint e;  
8388 } input;
8389 
8390 #define C(x)  ((x)-'@')  
8391 
8392 void
8393 consoleintr(int (*getc)(void))
8394 {
8395   int c, doprocdump = 0;
8396 
8397   acquire(&cons.lock);
8398   while((c = getc()) >= 0){
8399     switch(c){
8400     case C('P'):  
8401       
8402       doprocdump = 1;
8403       break;
8404     case C('U'):  
8405       while(input.e != input.w &&
8406             input.buf[(input.e-1) % INPUT_BUF] != '\n'){
8407         input.e--;
8408         consputc(BACKSPACE);
8409       }
8410       break;
8411     case C('H'): case '\x7f':  
8412       if(input.e != input.w){
8413         input.e--;
8414         consputc(BACKSPACE);
8415       }
8416       break;
8417     default:
8418       if(c != 0 && input.e-input.r < INPUT_BUF){
8419         c = (c == '\r') ? '\n' : c;
8420         input.buf[input.e++ % INPUT_BUF] = c;
8421         consputc(c);
8422         if(c == '\n' || c == C('D') || input.e == input.r+INPUT_BUF){
8423           input.w = input.e;
8424           wakeup(&input.r);
8425         }
8426       }
8427       break;
8428     }
8429   }
8430   release(&cons.lock);
8431   if(doprocdump) {
8432     procdump();  
8433   }
8434 }
8435 
8436 
8437 
8438 
8439 
8440 
8441 
8442 
8443 
8444 
8445 
8446 
8447 
8448 
8449 
8450 int
8451 consoleread(struct inode *ip, char *dst, int n)
8452 {
8453   uint target;
8454   int c;
8455 
8456   iunlock(ip);
8457   target = n;
8458   acquire(&cons.lock);
8459   while(n > 0){
8460     while(input.r == input.w){
8461       if(myproc()->killed){
8462         release(&cons.lock);
8463         ilock(ip);
8464         return -1;
8465       }
8466       sleep(&input.r, &cons.lock);
8467     }
8468     c = input.buf[input.r++ % INPUT_BUF];
8469     if(c == C('D')){  
8470       if(n < target){
8471         
8472         
8473         input.r--;
8474       }
8475       break;
8476     }
8477     *dst++ = c;
8478     --n;
8479     if(c == '\n')
8480       break;
8481   }
8482   release(&cons.lock);
8483   ilock(ip);
8484 
8485   return target - n;
8486 }
8487 
8488 
8489 
8490 
8491 
8492 
8493 
8494 
8495 
8496 
8497 
8498 
8499 
8500 int
8501 consolewrite(struct inode *ip, char *buf, int n)
8502 {
8503   int i;
8504 
8505   iunlock(ip);
8506   acquire(&cons.lock);
8507   for(i = 0; i < n; i++)
8508     consputc(buf[i] & 0xff);
8509   release(&cons.lock);
8510   ilock(ip);
8511 
8512   return n;
8513 }
8514 
8515 void
8516 consoleinit(void)
8517 {
8518   panicked = 0;
8519   initlock(&cons.lock, "console");
8520 
8521   devsw[CONSOLE].write = consolewrite;
8522   devsw[CONSOLE].read = consoleread;
8523 
8524   char *p;
8525   for(p="Starting XV6_UEFI...\n"; *p; p++)
8526     graphic_putc(*p);
8527 
8528   cons.locking = 1;
8529 
8530   ioapicenable(IRQ_KBD, 0);
8531 }
8532 
8533 
8534 
8535 
8536 
8537 
8538 
8539 
8540 
8541 
8542 
8543 
8544 
8545 
8546 
8547 
8548 
8549 
8550 
8551 
8552 #include "types.h"
8553 #include "defs.h"
8554 #include "param.h"
8555 #include "traps.h"
8556 #include "spinlock.h"
8557 #include "sleeplock.h"
8558 #include "fs.h"
8559 #include "file.h"
8560 #include "mmu.h"
8561 #include "proc.h"
8562 #include "x86.h"
8563 
8564 #define COM1    0x3f8
8565 
8566 static int uart;    
8567 
8568 void
8569 uartinit(void)
8570 {
8571   char *p;
8572 
8573   
8574   outb(COM1+2, 0);
8575 
8576   
8577   outb(COM1+3, 0x80);    
8578   outb(COM1+0, 115200/9600);
8579   outb(COM1+1, 0);
8580   outb(COM1+3, 0x03);    
8581   outb(COM1+4, 0);
8582   outb(COM1+1, 0x01);    
8583 
8584   
8585   if(inb(COM1+5) == 0xFF)
8586     return;
8587   uart = 1;
8588 
8589   
8590   
8591   inb(COM1+2);
8592   inb(COM1+0);
8593   ioapicenable(IRQ_COM1, 0);
8594 
8595   
8596   for(p="xv6...\n"; *p; p++)
8597     uartputc(*p);
8598 }
8599 
8600 void
8601 uartputc(int c)
8602 {
8603   int i;
8604 
8605   if(!uart)
8606     return;
8607   for(i = 0; i < 128 && !(inb(COM1+5) & 0x20); i++)
8608     microdelay(10);
8609   outb(COM1+0, c);
8610 }
8611 
8612 static int
8613 uartgetc(void)
8614 {
8615   if(!uart)
8616     return -1;
8617   if(!(inb(COM1+5) & 0x01))
8618     return -1;
8619   return inb(COM1+0);
8620 }
8621 
8622 void
8623 uartintr(void)
8624 {
8625   consoleintr(uartgetc);
8626 }
8627 
8628 
8629 
8630 
8631 
8632 
8633 
8634 
8635 
8636 
8637 
8638 
8639 
8640 
8641 
8642 
8643 
8644 
8645 
8646 
8647 
8648 
8649 
8650 
8651 
8652 
8653 
8654 
8655 
8656 
8657 
8658 .globl start
8659 start:
8660   pushl $argv
8661   pushl $init
8662   pushl $0  
8663   movl $SYS_exec, %eax
8664   int $T_SYSCALL
8665 
8666 
8667 exit:
8668   movl $SYS_exit, %eax
8669   int $T_SYSCALL
8670   jmp exit
8671 
8672 
8673 init:
8674   .string "/init\0"
8675 
8676 
8677 .p2align 2
8678 argv:
8679   .long init
8680   .long 0
8681 
8682 
8683 
8684 
8685 
8686 
8687 
8688 
8689 
8690 
8691 
8692 
8693 
8694 
8695 
8696 
8697 
8698 
8699 
8700 
8701 
8702 
8703 
8704   .globl name; \
8705   name: \
8706     movl $SYS_ 
8707     int $T_SYSCALL; \
8708     ret
8709 
8710 SYSCALL(fork)
8711 SYSCALL(exit)
8712 SYSCALL(wait)
8713 SYSCALL(pipe)
8714 SYSCALL(read)
8715 SYSCALL(write)
8716 SYSCALL(close)
8717 SYSCALL(kill)
8718 SYSCALL(exec)
8719 SYSCALL(open)
8720 SYSCALL(mknod)
8721 SYSCALL(unlink)
8722 SYSCALL(fstat)
8723 SYSCALL(link)
8724 SYSCALL(mkdir)
8725 SYSCALL(chdir)
8726 SYSCALL(dup)
8727 SYSCALL(getpid)
8728 SYSCALL(sbrk)
8729 SYSCALL(sleep)
8730 SYSCALL(uptime)
8731 SYSCALL(exit2)
8732 SYSCALL(wait2)
8733 
8734 
8735 
8736 
8737 
8738 
8739 
8740 
8741 
8742 
8743 
8744 
8745 
8746 
8747 
8748 
8749 
8750 
8751 
8752 #include "types.h"
8753 #include "stat.h"
8754 #include "user.h"
8755 #include "fcntl.h"
8756 
8757 char *argv[] = { "sh", 0 };
8758 
8759 int
8760 main(void)
8761 {
8762   int pid, wpid;
8763 
8764   if(open("console", O_RDWR) < 0){
8765     mknod("console", 1, 1);
8766     open("console", O_RDWR);
8767   }
8768   dup(0);  
8769   dup(0);  
8770 
8771   for(;;){
8772     printf(1, "init: starting sh\n");
8773     pid = fork();
8774     if(pid < 0){
8775       printf(1, "init: fork failed\n");
8776       exit();
8777     }
8778     if(pid == 0){
8779       exec("sh", argv);
8780       printf(1, "init: exec sh failed\n");
8781       exit();
8782     }
8783     while((wpid=wait()) >= 0 && wpid != pid)
8784       printf(1, "zombie!\n");
8785   }
8786 }
8787 
8788 
8789 
8790 
8791 
8792 
8793 
8794 
8795 
8796 
8797 
8798 
8799 
8800 
8801 
8802 #include "types.h"
8803 #include "user.h"
8804 #include "fcntl.h"
8805 
8806 
8807 #define EXEC  1
8808 #define REDIR 2
8809 #define PIPE  3
8810 #define LIST  4
8811 #define BACK  5
8812 
8813 #define MAXARGS 10
8814 
8815 struct cmd {
8816   int type;
8817 };
8818 
8819 struct execcmd {
8820   int type;
8821   char *argv[MAXARGS];
8822   char *eargv[MAXARGS];
8823 };
8824 
8825 struct redircmd {
8826   int type;
8827   struct cmd *cmd;
8828   char *file;
8829   char *efile;
8830   int mode;
8831   int fd;
8832 };
8833 
8834 struct pipecmd {
8835   int type;
8836   struct cmd *left;
8837   struct cmd *right;
8838 };
8839 
8840 struct listcmd {
8841   int type;
8842   struct cmd *left;
8843   struct cmd *right;
8844 };
8845 
8846 struct backcmd {
8847   int type;
8848   struct cmd *cmd;
8849 };
8850 int fork1(void);  
8851 void panic(char*);
8852 struct cmd *parsecmd(char*);
8853 
8854 
8855 void
8856 runcmd(struct cmd *cmd)
8857 {
8858   int p[2];
8859   struct backcmd *bcmd;
8860   struct execcmd *ecmd;
8861   struct listcmd *lcmd;
8862   struct pipecmd *pcmd;
8863   struct redircmd *rcmd;
8864 
8865   if(cmd == 0)
8866     exit();
8867 
8868   switch(cmd->type){
8869   default:
8870     panic("runcmd");
8871 
8872   case EXEC:
8873     ecmd = (struct execcmd*)cmd;
8874     if(ecmd->argv[0] == 0)
8875       exit();
8876     exec(ecmd->argv[0], ecmd->argv);
8877     printf(2, "exec %s failed\n", ecmd->argv[0]);
8878     break;
8879 
8880   case REDIR:
8881     rcmd = (struct redircmd*)cmd;
8882     close(rcmd->fd);
8883     if(open(rcmd->file, rcmd->mode) < 0){
8884       printf(2, "open %s failed\n", rcmd->file);
8885       exit();
8886     }
8887     runcmd(rcmd->cmd);
8888     break;
8889 
8890   case LIST:
8891     lcmd = (struct listcmd*)cmd;
8892     if(fork1() == 0)
8893       runcmd(lcmd->left);
8894     wait();
8895     runcmd(lcmd->right);
8896     break;
8897 
8898 
8899 
8900   case PIPE:
8901     pcmd = (struct pipecmd*)cmd;
8902     if(pipe(p) < 0)
8903       panic("pipe");
8904     if(fork1() == 0){
8905       close(1);
8906       dup(p[1]);
8907       close(p[0]);
8908       close(p[1]);
8909       runcmd(pcmd->left);
8910     }
8911     if(fork1() == 0){
8912       close(0);
8913       dup(p[0]);
8914       close(p[0]);
8915       close(p[1]);
8916       runcmd(pcmd->right);
8917     }
8918     close(p[0]);
8919     close(p[1]);
8920     wait();
8921     wait();
8922     break;
8923 
8924   case BACK:
8925     bcmd = (struct backcmd*)cmd;
8926     if(fork1() == 0)
8927       runcmd(bcmd->cmd);
8928     break;
8929   }
8930   exit();
8931 }
8932 
8933 int
8934 getcmd(char *buf, int nbuf)
8935 {
8936   printf(2, "$ ");
8937   memset(buf, 0, nbuf);
8938   gets(buf, nbuf);
8939   if(buf[0] == 0) 
8940     return -1;
8941   return 0;
8942 }
8943 
8944 
8945 
8946 
8947 
8948 
8949 
8950 int
8951 main(void)
8952 {
8953   static char buf[100];
8954   int fd;
8955 
8956   
8957   while((fd = open("console", O_RDWR)) >= 0){
8958     if(fd >= 3){
8959       close(fd);
8960       break;
8961     }
8962   }
8963 
8964   
8965   while(getcmd(buf, sizeof(buf)) >= 0){
8966     if(buf[0] == 'c' && buf[1] == 'd' && buf[2] == ' '){
8967       
8968       buf[strlen(buf)-1] = 0;  
8969       if(chdir(buf+3) < 0)
8970         printf(2, "cannot cd %s\n", buf+3);
8971       continue;
8972     }
8973     if(fork1() == 0)
8974       runcmd(parsecmd(buf));
8975     wait();
8976   }
8977   exit();
8978 }
8979 
8980 void
8981 panic(char *s)
8982 {
8983   printf(2, "%s\n", s);
8984   exit();
8985 }
8986 
8987 int
8988 fork1(void)
8989 {
8990   int pid;
8991 
8992   pid = fork();
8993   if(pid == -1)
8994     panic("fork");
8995   return pid;
8996 }
8997 
8998 
8999 
9000 
9001 
9002 struct cmd*
9003 execcmd(void)
9004 {
9005   struct execcmd *cmd;
9006 
9007   cmd = malloc(sizeof(*cmd));
9008   memset(cmd, 0, sizeof(*cmd));
9009   cmd->type = EXEC;
9010   return (struct cmd*)cmd;
9011 }
9012 
9013 struct cmd*
9014 redircmd(struct cmd *subcmd, char *file, char *efile, int mode, int fd)
9015 {
9016   struct redircmd *cmd;
9017 
9018   cmd = malloc(sizeof(*cmd));
9019   memset(cmd, 0, sizeof(*cmd));
9020   cmd->type = REDIR;
9021   cmd->cmd = subcmd;
9022   cmd->file = file;
9023   cmd->efile = efile;
9024   cmd->mode = mode;
9025   cmd->fd = fd;
9026   return (struct cmd*)cmd;
9027 }
9028 
9029 struct cmd*
9030 pipecmd(struct cmd *left, struct cmd *right)
9031 {
9032   struct pipecmd *cmd;
9033 
9034   cmd = malloc(sizeof(*cmd));
9035   memset(cmd, 0, sizeof(*cmd));
9036   cmd->type = PIPE;
9037   cmd->left = left;
9038   cmd->right = right;
9039   return (struct cmd*)cmd;
9040 }
9041 
9042 
9043 
9044 
9045 
9046 
9047 
9048 
9049 
9050 struct cmd*
9051 listcmd(struct cmd *left, struct cmd *right)
9052 {
9053   struct listcmd *cmd;
9054 
9055   cmd = malloc(sizeof(*cmd));
9056   memset(cmd, 0, sizeof(*cmd));
9057   cmd->type = LIST;
9058   cmd->left = left;
9059   cmd->right = right;
9060   return (struct cmd*)cmd;
9061 }
9062 
9063 struct cmd*
9064 backcmd(struct cmd *subcmd)
9065 {
9066   struct backcmd *cmd;
9067 
9068   cmd = malloc(sizeof(*cmd));
9069   memset(cmd, 0, sizeof(*cmd));
9070   cmd->type = BACK;
9071   cmd->cmd = subcmd;
9072   return (struct cmd*)cmd;
9073 }
9074 
9075 
9076 
9077 
9078 
9079 
9080 
9081 
9082 
9083 
9084 
9085 
9086 
9087 
9088 
9089 
9090 
9091 
9092 
9093 
9094 
9095 
9096 
9097 
9098 
9099 
9100 
9101 
9102 char whitespace[] = " \t\r\n\v";
9103 char symbols[] = "<|>&;()";
9104 
9105 int
9106 gettoken(char **ps, char *es, char **q, char **eq)
9107 {
9108   char *s;
9109   int ret;
9110 
9111   s = *ps;
9112   while(s < es && strchr(whitespace, *s))
9113     s++;
9114   if(q)
9115     *q = s;
9116   ret = *s;
9117   switch(*s){
9118   case 0:
9119     break;
9120   case '|':
9121   case '(':
9122   case ')':
9123   case ';':
9124   case '&':
9125   case '<':
9126     s++;
9127     break;
9128   case '>':
9129     s++;
9130     if(*s == '>'){
9131       ret = '+';
9132       s++;
9133     }
9134     break;
9135   default:
9136     ret = 'a';
9137     while(s < es && !strchr(whitespace, *s) && !strchr(symbols, *s))
9138       s++;
9139     break;
9140   }
9141   if(eq)
9142     *eq = s;
9143 
9144   while(s < es && strchr(whitespace, *s))
9145     s++;
9146   *ps = s;
9147   return ret;
9148 }
9149 
9150 int
9151 peek(char **ps, char *es, char *toks)
9152 {
9153   char *s;
9154 
9155   s = *ps;
9156   while(s < es && strchr(whitespace, *s))
9157     s++;
9158   *ps = s;
9159   return *s && strchr(toks, *s);
9160 }
9161 
9162 struct cmd *parseline(char**, char*);
9163 struct cmd *parsepipe(char**, char*);
9164 struct cmd *parseexec(char**, char*);
9165 struct cmd *nulterminate(struct cmd*);
9166 
9167 struct cmd*
9168 parsecmd(char *s)
9169 {
9170   char *es;
9171   struct cmd *cmd;
9172 
9173   es = s + strlen(s);
9174   cmd = parseline(&s, es);
9175   peek(&s, es, "");
9176   if(s != es){
9177     printf(2, "leftovers: %s\n", s);
9178     panic("syntax");
9179   }
9180   nulterminate(cmd);
9181   return cmd;
9182 }
9183 
9184 struct cmd*
9185 parseline(char **ps, char *es)
9186 {
9187   struct cmd *cmd;
9188 
9189   cmd = parsepipe(ps, es);
9190   while(peek(ps, es, "&")){
9191     gettoken(ps, es, 0, 0);
9192     cmd = backcmd(cmd);
9193   }
9194   if(peek(ps, es, ";")){
9195     gettoken(ps, es, 0, 0);
9196     cmd = listcmd(cmd, parseline(ps, es));
9197   }
9198   return cmd;
9199 }
9200 struct cmd*
9201 parsepipe(char **ps, char *es)
9202 {
9203   struct cmd *cmd;
9204 
9205   cmd = parseexec(ps, es);
9206   if(peek(ps, es, "|")){
9207     gettoken(ps, es, 0, 0);
9208     cmd = pipecmd(cmd, parsepipe(ps, es));
9209   }
9210   return cmd;
9211 }
9212 
9213 struct cmd*
9214 parseredirs(struct cmd *cmd, char **ps, char *es)
9215 {
9216   int tok;
9217   char *q, *eq;
9218 
9219   while(peek(ps, es, "<>")){
9220     tok = gettoken(ps, es, 0, 0);
9221     if(gettoken(ps, es, &q, &eq) != 'a')
9222       panic("missing file for redirection");
9223     switch(tok){
9224     case '<':
9225       cmd = redircmd(cmd, q, eq, O_RDONLY, 0);
9226       break;
9227     case '>':
9228       cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);
9229       break;
9230     case '+':  
9231       cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);
9232       break;
9233     }
9234   }
9235   return cmd;
9236 }
9237 
9238 
9239 
9240 
9241 
9242 
9243 
9244 
9245 
9246 
9247 
9248 
9249 
9250 struct cmd*
9251 parseblock(char **ps, char *es)
9252 {
9253   struct cmd *cmd;
9254 
9255   if(!peek(ps, es, "("))
9256     panic("parseblock");
9257   gettoken(ps, es, 0, 0);
9258   cmd = parseline(ps, es);
9259   if(!peek(ps, es, ")"))
9260     panic("syntax - missing )");
9261   gettoken(ps, es, 0, 0);
9262   cmd = parseredirs(cmd, ps, es);
9263   return cmd;
9264 }
9265 
9266 struct cmd*
9267 parseexec(char **ps, char *es)
9268 {
9269   char *q, *eq;
9270   int tok, argc;
9271   struct execcmd *cmd;
9272   struct cmd *ret;
9273 
9274   if(peek(ps, es, "("))
9275     return parseblock(ps, es);
9276 
9277   ret = execcmd();
9278   cmd = (struct execcmd*)ret;
9279 
9280   argc = 0;
9281   ret = parseredirs(ret, ps, es);
9282   while(!peek(ps, es, "|)&;")){
9283     if((tok=gettoken(ps, es, &q, &eq)) == 0)
9284       break;
9285     if(tok != 'a')
9286       panic("syntax");
9287     cmd->argv[argc] = q;
9288     cmd->eargv[argc] = eq;
9289     argc++;
9290     if(argc >= MAXARGS)
9291       panic("too many args");
9292     ret = parseredirs(ret, ps, es);
9293   }
9294   cmd->argv[argc] = 0;
9295   cmd->eargv[argc] = 0;
9296   return ret;
9297 }
9298 
9299 
9300 
9301 struct cmd*
9302 nulterminate(struct cmd *cmd)
9303 {
9304   int i;
9305   struct backcmd *bcmd;
9306   struct execcmd *ecmd;
9307   struct listcmd *lcmd;
9308   struct pipecmd *pcmd;
9309   struct redircmd *rcmd;
9310 
9311   if(cmd == 0)
9312     return 0;
9313 
9314   switch(cmd->type){
9315   case EXEC:
9316     ecmd = (struct execcmd*)cmd;
9317     for(i=0; ecmd->argv[i]; i++)
9318       *ecmd->eargv[i] = 0;
9319     break;
9320 
9321   case REDIR:
9322     rcmd = (struct redircmd*)cmd;
9323     nulterminate(rcmd->cmd);
9324     *rcmd->efile = 0;
9325     break;
9326 
9327   case PIPE:
9328     pcmd = (struct pipecmd*)cmd;
9329     nulterminate(pcmd->left);
9330     nulterminate(pcmd->right);
9331     break;
9332 
9333   case LIST:
9334     lcmd = (struct listcmd*)cmd;
9335     nulterminate(lcmd->left);
9336     nulterminate(lcmd->right);
9337     break;
9338 
9339   case BACK:
9340     bcmd = (struct backcmd*)cmd;
9341     nulterminate(bcmd->cmd);
9342     break;
9343   }
9344   return cmd;
9345 }
9346 
9347 
9348 
9349 
9350 
9351 
9352 
9353 
9354 
9355 
9356 
9357 
9358 
9359 .code16                       
9360 .globl start
9361 start:
9362   cli                         
9363 
9364   
9365   xorw    %ax,%ax             
9366   movw    %ax,%ds             
9367   movw    %ax,%es             
9368   movw    %ax,%ss             
9369 
9370   
9371   
9372 seta20.1:
9373   inb     $0x64,%al               
9374   testb   $0x2,%al
9375   jnz     seta20.1
9376 
9377   movb    $0xd1,%al               
9378   outb    %al,$0x64
9379 
9380 seta20.2:
9381   inb     $0x64,%al               
9382   testb   $0x2,%al
9383   jnz     seta20.2
9384 
9385   movb    $0xdf,%al               
9386   outb    %al,$0x60
9387 
9388   
9389   
9390   
9391   lgdt    gdtdesc
9392   movl    %cr0, %eax
9393   orl     $CR0_PE, %eax
9394   movl    %eax, %cr0
9395 
9396 
9397 
9398 
9399 
9400   
9401   
9402   
9403   ljmp    $(SEG_KCODE<<3), $start32
9404 
9405 .code32  
9406 start32:
9407   
9408   movw    $(SEG_KDATA<<3), %ax    
9409   movw    %ax, %ds                
9410   movw    %ax, %es                
9411   movw    %ax, %ss                
9412   movw    $0, %ax                 
9413   movw    %ax, %fs                
9414   movw    %ax, %gs                
9415 
9416   
9417   movl    $start, %esp
9418   call    bootmain
9419 
9420   
9421   
9422   movw    $0x8a00, %ax            
9423   movw    %ax, %dx
9424   outw    %ax, %dx
9425   movw    $0x8ae0, %ax            
9426   outw    %ax, %dx
9427 spin:
9428   jmp     spin
9429 
9430 
9431 .p2align 2                                
9432 gdt:
9433   SEG_NULLASM                             
9434   SEG_ASM(STA_X|STA_R, 0x0, 0xffffffff)   
9435   SEG_ASM(STA_W, 0x0, 0xffffffff)         
9436 
9437 gdtdesc:
9438   .word   (gdtdesc - gdt - 1)             
9439   .long   gdt                             
9440 
9441 
9442 
9443 
9444 
9445 
9446 
9447 
9448 
9449 
9450 
9451 
9452 
9453 
9454 
9455 
9456 
9457 #include "types.h"
9458 #include "elf.h"
9459 #include "x86.h"
9460 #include "memlayout.h"
9461 
9462 #define SECTSIZE  512
9463 
9464 void readseg(uchar*, uint, uint);
9465 
9466 void
9467 bootmain(void)
9468 {
9469   struct elfhdr *elf;
9470   struct proghdr *ph, *eph;
9471   void (*entry)(void);
9472   uchar* pa;
9473 
9474   elf = (struct elfhdr*)0x10000;  
9475 
9476   
9477   readseg((uchar*)elf, 4096, 0);
9478 
9479   
9480   if(elf->magic != ELF_MAGIC)
9481     return;  
9482 
9483   
9484   ph = (struct proghdr*)((uchar*)elf + elf->phoff);
9485   eph = ph + elf->phnum;
9486   for(; ph < eph; ph++){
9487     pa = (uchar*)ph->paddr;
9488     readseg(pa, ph->filesz, ph->off);
9489     if(ph->memsz > ph->filesz)
9490       stosb(pa + ph->filesz, 0, ph->memsz - ph->filesz);
9491   }
9492 
9493   
9494   
9495   entry = (void(*)(void))(elf->entry);
9496   entry();
9497 }
9498 
9499 
9500 void
9501 waitdisk(void)
9502 {
9503   
9504   while((inb(0x1F7) & 0xC0) != 0x40)
9505     ;
9506 }
9507 
9508 
9509 void
9510 readsect(void *dst, uint offset)
9511 {
9512   
9513   waitdisk();
9514   outb(0x1F2, 1);   
9515   outb(0x1F3, offset);
9516   outb(0x1F4, offset >> 8);
9517   outb(0x1F5, offset >> 16);
9518   outb(0x1F6, (offset >> 24) | 0xE0);
9519   outb(0x1F7, 0x20);  
9520 
9521   
9522   waitdisk();
9523   insl(0x1F0, dst, SECTSIZE/4);
9524 }
9525 
9526 
9527 
9528 void
9529 readseg(uchar* pa, uint count, uint offset)
9530 {
9531   uchar* epa;
9532 
9533   epa = pa + count;
9534 
9535   
9536   pa -= offset % SECTSIZE;
9537 
9538   
9539   offset = (offset / SECTSIZE) + 1;
9540 
9541   
9542   
9543   
9544   for(; pa < epa; pa += SECTSIZE, offset++)
9545     readsect(pa, offset);
9546 }
9547 
9548 
9549 
